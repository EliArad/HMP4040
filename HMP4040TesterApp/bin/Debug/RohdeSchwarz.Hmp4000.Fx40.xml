<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RohdeSchwarz.Hmp4000.Fx40</name>
    </assembly>
    <members>
        <member name="T:IVINET.Internal.Access">
            <summary>
            Access to attribute
            </summary>
        </member>
        <member name="T:IVINET.Internal.Attr">
            <summary>
            Attribute
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.p2value">
            <summary>
            Current value (cached)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.SetCacheValue(System.Object)">
            <summary>
            Sets value into p2value of attribute (cache)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IVINET.Internal.Attr.GetCacheValue(System.Object@)">
            <summary>
            Gets value from p2value of attribute (cache)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IVINET.Internal.Attr.CheckModelOpt(IVINET.Internal.InstrumentOptions,System.String,System.String)">
            <summary>
            Checks if the attribute is supported for the currently used
            instrument model (and options included).
            </summary>
            <param name="currentInstrOptions">List of the current instrument option</param>
            <param name="currentInstrModel">CurrentInstrument Model</param>
            <param name="modelForErrMsg">Instrument model string used in exception messages</param>
        </member>
        <member name="M:IVINET.Internal.Attr.HasOption(System.String,IVINET.Internal.InstrumentOptions)">
            <summary>
            Checks if the options expression "(option1|option2&amp;option3|...)"
            is valid for the current instrument options.
            The current instrument model does not need to be considered,
            since this method is only called with expressions that are already preselected
            to be valid for the current instrument model.
            </summary>
            <param name="expression">Expression of options from the attribute,
            preselected to be valid for the current instrument model.</param>
            <param name="currentInstrOptions">List of the current instrument option</param>
            <returns></returns>
        </member>
        <member name="P:IVINET.Internal.Attr.Readable">
            <summary>
            Returns true, if the attribute is readable
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Writable">
            <summary>
            Returns true, if the attribute is writable
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.UserReadable">
            <summary>
            Returns true, if the attribute can be read by the user (Flag RS_VAL_NOT_USER_READABLE is not set)
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.UserWritable">
            <summary>
            Returns true, if the attribute can be written by the user (Flag RS_VAL_NOT_USER_WRITABLE is not set)
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.DontCheckStatus">
            <summary>
            Returns true, if the attribute has blocked status checking (Flags.RS_VAL_DONT_CHECK_STATUS is set)
            </summary>
            <returns></returns>
        </member>
        <member name="P:IVINET.Internal.Attr.OpcSync">
            <summary>
            Attribute is OPC-synchronized
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.UseCallbacksForSimulation">
            <summary>
            Returns true, if the attribute should call Read/Write callbacks in simulation mode
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Enabled">
            <summary>
            Returns true, if the attribute is enabled
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.ValueCoerceableOnlyByInstrument">
            <summary>
            Returns true, if the attribute value can only be coerced by the instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.WaitToContinue">
            <summary>
            Returns true, if the *WAI should be added after the command
            Exclusive with OpcSync attribute, in case of both set the OpcSync takes priority
            </summary>
        </member>
        <member name="T:IVINET.Internal.AttrHelper">
            <summary>
            Static class to pack repeated values, since Attr is instantiated hundreds or thousands of times
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:IVINET.Internal.Core" -->
        <member name="P:IVINET.Internal.Core.Version">
            <summary>
            Version of the Core and the whole Internal Folder
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.IO">
            <summary>
            Interface for instrument's Write and Query operations.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.Simulating">
            <summary>
            If true, the Core is in simulation mode capable of functioning without an instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.QueryInstrumentStatus">
            <summary>
            Provides set/get for Instrument's QueryInstrumentStatus
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.RangeCheck">
            <summary>
            If true, the Core performs Attribute's range checking
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.OptionCheck">
            <summary>
            If true, the Core performs attribute's option and model checking.
            The OptionChecking also affects CheckAndThrowIfNotInstrument() and CheckOption() methods used in driver's Hi-level methods.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.IviSessionName">
            <summary>
            If Ivi Logical / Driver Name is used as resourceName,
            this property holds the value of the referenced Driver Session Name
            Otherwise it returns null
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.ResolvedResourceName">
            <summary>
            Resolved VISA resource name with which the VISA session is opened
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.LoadConfigStore">
            <summary>
            Loading config store and handling COM exceptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.SetAttribute(IVINET.Internal.RCItemCollection,System.Int64,System.Object)">
            <summary>
            Sets the current value of the int, long, boolean, double and string attribute to the instrument.
            Depending on the configuration of the attribute, the function performs defined actions.
            It invokes default or attribute-specific WriteCallback(), that does the I/O operation
            and sends the new value to the instrument. The value is also stored in the attribute's cache field.
            </summary>
            <param name="rcValues">Repeated Capabilities values collection</param>
            <param name="idAttr">Attribute ID</param>
            <param name="value">Attribute value to set</param>
        </member>
        <member name="M:IVINET.Internal.Core.GetAttribute(IVINET.Internal.RCItemCollection,System.Int64)">
            <summary>
            Obtains the current value of the int, long, boolean, double and string attribute.
            Depending on the configuration of the attribute, the function performs defined actions
            The method invoked ReadCallback() for the attribute, that does the I/O operation
            and obtains a new value. The value is stored in the attribute's cache field
            and returned to the user in the value return variable
            </summary>
            <param name="rcValues">Repeated Capabilities values collection</param>
            <param name="idAttr">Attribute ID</param>
            <returns>value as object</returns>
        </member>
        <member name="M:IVINET.Internal.Core.GetAttributeById(System.Int64)">
            <summary>
             Returns attribute in the attribute list.
            </summary>
            <param name="idAttr">ID of attribute</param>
            <returns>Attribute object</returns>
        </member>
        <member name="M:IVINET.Internal.Core.GetRangeTable(System.String)">
            <summary>
            Returns range table according to its string id
            </summary>
            <param name="id">name of range table</param>
            <returns>range table</returns>
        </member>
        <member name="M:IVINET.Internal.Core.RangeTableStringIndex(System.String,System.String)">
            <summary>
            Returns value of command string in range table.
            Only applicable to Discrete Range Table Types
            </summary>
            <param name="rangeTableId">Name of range table.</param>
            <param name="commandString">Command string to search for.</param>
            <returns>Index of command string.</returns>
        </member>
        <member name="M:IVINET.Internal.Core.WriteAttrCommand(IVINET.Internal.Attr,System.String)">
            <summary>
            Sends command to the instrument taking the following attribute's flags into the account:
            OpcSync, WaitToContinue
            </summary>
            <param name="at">Attribute</param>
            <param name="command">Command as string to send</param>
        </member>
        <member name="M:IVINET.Internal.Core.WriteAttrCommand(IVINET.Internal.Attr,System.Text.StringBuilder)">
            <summary>
            Sends command to the instrument taking the following attribute's flags into the account:
            OpcSync, WaitToContinue
            </summary>
            <param name="at">Attribute</param>
            <param name="cmd">Command as StringBuilder to send</param>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommandRaw(IVINET.Internal.Attr,System.String)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            Writable, OpcSync
            The response is raw exactly like read
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommand(IVINET.Internal.Attr,System.String)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            Writable, OpcSync
            The response is trimmed of trailing LineFeed characters
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommand(IVINET.Internal.Attr,System.Text.StringBuilder)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            Writable, OpcSync, WaitToContinue
            The response is trimmed of trailing LineFeed characters
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallback(IVINET.Internal.RCItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Default Attribute's Write callback
            </summary>
            <param name="rcValues">RepCap values for the attribute</param>
            <param name="at">Attribute object</param>
            <param name="value">value to write</param>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallback(IVINET.Internal.RCItemCollection,IVINET.Internal.Attr,System.Object@)">
            <summary>
            Default Attribute's Read callback
            </summary>
            <param name="rcValues">RepCap values for the attribute</param>
            <param name="at">Attribute object</param>
            <param name="value">Returned value</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckRepeatedCapability(System.String,System.String)">
            <summary>
            Check if the RepCap name and key exist
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String)">
            <summary>
            Builds RepCap collection from one pair of Name and Key
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String,System.String,System.String)">
            <summary>
            Builds RepCap collection from 2 pairs of Names and Keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds RepCap collection from 3 pairs of Names and Keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds RepCap collection from 4 pairs of Names and Keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String[])">
            <summary>
            Builds RepCap collection from pairs of Names and Keys
            </summary>
            <param name="items">Pairs of Names and Keys</param>
        </member>
        <member name="M:IVINET.Internal.Core.Dispose(System.Boolean)">
            <summary>
            Disposes of the Core object
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.Close">
            <summary>
            This closes connection into instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.InstrumentOptions">
            <summary>
            Returns all current instrument options as ICollection
            </summary>
            <returns>ICollection of the current instrument options</returns>
        </member>
        <member name="M:IVINET.Internal.Core.IsInstrumentModel(System.String)">
            <summary>
            Returns true, if the current instrument type fits the entered string
            </summary>
            <param name="instrument">Instrument type to check for</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.GetFullInstrumentModel">
            <summary>
            Returns full instrument model, e.g. 'FSW26'
            Use it in the IviDriverIdentity to assign the InstrumentModel property
            </summary>
            <returns>Full instrument model</returns>
        </member>
        <member name="M:IVINET.Internal.Core.CheckInstrumentModel(System.String)">
            <summary>
            Throws an exception, if the current <paramref name="requiredInstrument"/> type does not fit the entered instrument
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, instrument model check is skipped
            </summary>
            <param name="requiredInstrument">Required instrument type to check for</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckInstrumentModel(System.String,System.String)">
            <summary>
            Throws an exception, if the current instrument type does not fit any of the two entered instruments
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, instrument model check is skipped
            </summary>
            <param name="instrument1">Alternative Instrument 1 to check for</param>
            <param name="instrument2">Alternative Instrument 2 to check for</param>
        </member>
        <member name="M:IVINET.Internal.Core.ResetAttributeCache">
            <summary>
            Resets cache values for all attributes
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.AddLogger(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.RemoveLogger(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteStringToLog(System.String)">
            <summary>
            <para>Writes string message to log.</para>
            <para>Identifier = RSPWRMETER_FUNC_WRITE_STRING_TO_LOG</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.GetAttribute``1">
            <summary>
            Returns attribute of assembly
            </summary>
            <typeparam name="T">Type of attribute</typeparam>
            <returns>found attribute</returns>
        </member>
        <member name="M:IVINET.Internal.Core.AddService(System.Type,System.Object)">
            <summary>
            Adds service
            </summary>
            <param name="identifier">Service identifier</param>
            <param name="serviceProvider">Service</param>
        </member>
        <member name="M:IVINET.Internal.Core.GetService(System.Type)">
            <summary>
            Returns service specified by identifier
            </summary>
            <param name="identifier"></param>
            <returns>Object of service</returns>
        </member>
        <member name="M:IVINET.Internal.Core.SetAttributesToDefault">
            <summary>
            Sets attribute values to default
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.Lock">
            <summary>
            Lock
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.Lock(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Lock
            </summary>
            <param name="maxTime">time</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.CheckStatus">
            <summary>
            Performs instrument status checking with taking QueryInstrumentStatus property value into consideration
            If QueryInstrumentStatus is FALSE, instrument status checking is skipped
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOption(System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if the entered option is missing.
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="option">option string</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOption(System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if neither of the two options is present
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="option1">option1 string</param>
            <param name="option2">option2 string</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOption(System.String,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if none of the three options is present
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="option1">option1 string</param>
            <param name="option2">option2 string</param>
            <param name="option3">option3 string</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOptions(System.String[])">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if none of the entered options array is present
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="options">Array with option string alternatives</param>
        </member>
        <member name="M:IVINET.Internal.Core.IsOptionAvailable(System.String)">
            <summary>
            Return true, if the instrument has the entered option installed
            </summary>
            <param name="option">option string</param>
        </member>
        <member name="M:IVINET.Internal.Core.InitWithOptions(System.String,System.Boolean,System.Boolean,Ivi.Driver.LockType,System.String,System.String,Ivi.Driver.IIviDriver)">
            <summary>
            Overwritten by CoreEx
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.Reset">
            <summary>
            Instrument driver setup with resetting
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.DefaultInstrSetup">
            <summary>
            Instrument driver setup without resetting
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.InitAttributes">
            <summary>
            Driver specific attribute initialization
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core._ParseInitWithOptionsString(System.String)">
            <summary>
            Takes the input string and parses it into output Dictionary of tokens
            If the setting is in a group e.g. DriverSetup=(WriteDelay=50),
            the Key value gets the group name as prefix. e.g. in this case DriverSetup_WriteDelay=50
            Keys are all Upper Cases
            </summary>
            <param name="settings">Settings string to parse</param>
            <returns>Output dictionary of tokens</returns>
        </member>
        <member name="T:IVINET.Internal.CheckStatusDelegate">
            <summary>
            Check status delegate
            </summary>
        </member>
        <member name="T:IVINET.Internal.CoreAttributes">
            <summary>
            Core attributes
            </summary>
        </member>
        <member name="T:IVINET.Internal.DataType">
            <summary>
            Data type of attributes
            </summary>
        </member>
        <member name="M:IVINET.Internal.DriverProperties.#ctor">
            <summary>
            Constructor to set default values;
            </summary>
        </member>
        <member name="M:IVINET.Internal.DriverProperties.ApplyOptionSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Apply settings to Property fields
            </summary>
            <param name="settings">Settings in Dictionary. Only the relevant ones for DriverProperties are set</param>
        </member>
        <member name="T:IVINET.Internal.DriverErrors">
            <summary>
            Instrument-class related errors
            </summary>
        </member>
        <member name="M:IVINET.Internal.DriverErrors.ThrowOperationNotSupported(System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - general purpose use
            </summary>
            <param name="operation">Operation description</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.DriverErrors.ThrowIsNotInstrument(System.String,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting an instrument model is as expected
            </summary>
            <param name="requiredModel">Required instrument for the operation</param>
            <param name="errMessageModel">instrument model for error message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="T:IVINET.Internal.InstrumentErrors">
            <summary>
            Static class containing all the Instrument Erros and Assertions
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertNoInstrumentStatusErrors(System.Collections.Generic.ICollection{Ivi.Driver.ErrorQueryResult},System.String)">
            <summary>
            Checks the errors list and of it contains at least one element, throws Ivi.Driver.InstrumentStatusException
            </summary>
            <param name="errors">Errors collection</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertNoInstrumentStatusErrors(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Checks the errors list and of it contains at least one element, throws Ivi.Driver.InstrumentStatusException
            </summary>
            <param name="errors">List of error strings</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowOpcToutException(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an Ivi.Driver.MaxTimeExceededException - use it for any timeout error
            </summary>
            <param name="opcTimeoutMs">Current session OPC timeout</param>
            <param name="usedTimeoutMs">Used Timeout</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowIdQueryFailedException(System.String,System.String[])">
            <summary>
            Throws Ivi.Driver.IdQueryFailedException - internally used if an instrument is not supported by the driver
            </summary>
            <param name="model">Current instrument model</param>
            <param name="supportedInstrumentModels">Models supported by the driver</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowUnexpectedResponseException(System.String,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.UnexpectedResponseException - use it in case an instrument response is not as expected
            </summary>
            <param name="command">Command sent to the instrument</param>
            <param name="response">Response received from the instrument</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowBinDataBlockUnexpectedResponseException(System.String)">
            <summary>
            Throws Ivi.Driver.UnexpectedResponseException - use it in case an instrument response is not a binary block
            </summary>
            <param name="receivedData">Response received from the instrument</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertCommandContainsNoQuestionMark(System.String,System.String)">
            <summary>
            Checks a command and throws Ivi.Driver.OperationNotSupportedException if the command contains a question-mark
            </summary>
            <param name="command">Command to check</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertQueryContainsQuestionMark(System.String,System.String)">
            <summary>
            Checks a command and throws Ivi.Driver.OperationNotSupportedException if the query does not contain a question-mark
            </summary>
            <param name="query">Query to check</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.ThrowInvalidRtTypeException(IVINET.Internal.RangeTableType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting an expected RangeTable type
            </summary>
            <param name="type">Range table type</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.ThrowDiscreteValueNotFoundException(System.Object,IVINET.Internal.RangeTable)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it for Discrete RangeTable if it does not contain a certain value
            </summary>
            <param name="value">Value to check in the discrete range table</param>
            <param name="rng">Range table to search in</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.ThrowDiscreteItemNotFoundException(IVINET.Internal.RangeTable,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.UnexpectedResponseException - internally used for Discrete RangeTable conversion from value to intValue
            </summary>
            <param name="rng">Range Table</param>
            <param name="command">Command Parameter</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.AssertRangedRangeTableFormat(IVINET.Internal.RangeTable)">
            <summary>
            Checks the RangeTable and throws Ivi.Driver.ValueNotSupportedException if the RangeTable is not of the type Ranged
            </summary>
            <param name="rng">Range table to check</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.AssertCoercedRangeTableFormat(IVINET.Internal.RangeTable)">
            <summary>
            Checks the RangeTable and throws Ivi.Driver.ValueNotSupportedException if the RangeTable is not of the type Coerced
            </summary>
            <param name="rng">Range table to check</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.AssertDiscreteRangeTableFormat(IVINET.Internal.RangeTable)">
            <summary>
            Checks the RangeTable and throws Ivi.Driver.ValueNotSupportedException if the RangeTable is not of the type Discrete
            </summary>
            <param name="rng">Range table to check</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.AssertRangedRtValueInRange(System.Object,IVINET.Internal.DataType,System.Double,System.Double)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it for RangeTable type Ranged if a value is Out Of Range 
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.ThrowInvalidTypeException(IVINET.Internal.DataType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting certain Attribute Data Types
            </summary>
            <param name="type">Attribute data type</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.ThrowInvalidTypeException(System.Object,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting certain data types
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptionsErrors.ThrowOptionMissingException(System.String,IVINET.Internal.InstrumentOptions)">
            <summary>
            Throws Ivi.Driver.OptionMissingException - use it to assert an option installed
            </summary>
            <param name="requiredOptions">Option(s) required for an operation</param>
            <param name="installedOptions">Options installed in the current instrument</param>
        </member>
        <member name="M:IVINET.Internal.RepCapErrors.ThrowRepCapsCollNullException(System.String)">
            <summary>
            Throws Ivi.Driver.SelectorNameRequiredException - used internally to check proper RepCaps definition
            </summary>
            <param name="command">Command definition</param>
        </member>
        <member name="M:IVINET.Internal.RepCapErrors.ThrowRepCapNameNotFoundException(System.String,IVINET.Internal.RCItemCollection,System.String)">
            <summary>
            Throws Ivi.Driver.SelectorNameException - used internally to check proper RepCaps definition
            </summary>
            <param name="rcName">Repeated Capability name</param>
            <param name="collection">Repeated Capability collection</param>
            <param name="command">Command definition</param>
        </member>
        <member name="M:IVINET.Internal.RepCapErrors.ThrowRepCapItemsSizeException(System.Int32)">
            <summary>
            Throws Ivi.Driver.SelectorFormatException - used internally to check proper RepCaps definition
            </summary>
            <param name="itemsSize">Repeated Capability collection size</param>
        </member>
        <member name="T:IVINET.Internal.ValueRangeAssertions">
            <summary>
            Assertions of values generating Ivi.Driver.OutOfRangeException
            </summary>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueHigherThan(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for double value lower than the minValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueHigherThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for integer value lower than the minValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueLowerThan(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for double value higher than the maxValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueLowerThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for integer value higher than the maxValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for integer value outside the minValue .. maxValue range
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for double value outside the minValue .. maxValue range
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueHigherThanException(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value lower than a max value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueHigherThanException(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value lower than a max value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueLowerThanException(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value higher than a min value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueLowerThanException(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value higher than a min value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <member name="T:IVINET.Internal.Flags">
            <summary>
            Flags of attribute
            </summary>
        </member>
        <member name="P:IVINET.Internal.IInstrument.BinaryFloatNumbersFormat">
            <summary>
            Defines the coding of floating-point numbers in binary data
            </summary>
        </member>
        <member name="P:IVINET.Internal.IInstrument.BinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of integer numbers in binary data
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.SetOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Sets new Instrument OPC Timeout in milliseconds and returns the old value.
            Values null, 0, or any negative number leave the OPC timeout unchanged
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.SetOpcTimeout(System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Sets new Instrument OPC Timeout entered as PrecisionTimeSpan and returns the old value in milliseconds.
            Value of null leaves the OPC timeout unchanged
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.GetOpcTimeout">
            <summary>
            Returns the Instrument's OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryErrorsAll">
            <summary>
            Uses SYSTEM:ERROR? query in a loop to read and delete all the errors in the instrument's error queue
            If no error is present, the method returns an empty collection
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryErrorLast">
            <summary>
            Uses SYSTEM:ERROR? query to read and delete the last error in the instrument's error queue.
            If no error is present, the method returns {code=0, msg='No Error'}
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.Write(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteWithWai(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Writes command with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.ReadUnknownLength">
            <summary>
            Reads all the available data as bytes from instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryString(System.String)">
            <summary>
            Sends a query and reads response from the instrument. Removes trailing LineFeed characters
            The response length is unlimited.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryStringWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Query response from instrument with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryInt32(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int32
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryInt32WithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Int32 synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryInt64(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int64
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryDouble(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Double
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format  (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryDoubleWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Double synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format  (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBoolean(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Boolean
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBooleanWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Boolean synchronised with OPC.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryStringArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as an array of comma-separated strings
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryAsciiDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated double numbers
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryAsciiInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated int numbers.
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryAsciiBooleanArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated booleans
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteBinaryDataBlock(System.String,System.Byte[])">
            <summary>
            Writes all the data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the binaryDataBlock input.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlock(System.String)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Queries binary data block and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlockWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlockWithOpc(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization, and returns it in the entered Stream. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiIntegerArray(System.String)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiIntegerArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteStringToLog(System.String)">
            <summary>
            Writes string message to log
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.ClearStatus">
            <summary>
            Clears instrument's status subsystem
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.SelfTest">
            <summary>
            Perform standard self test by sending *TST? query
            </summary>
        </member>
        <member name="T:IVINET.Internal.Instrument">
            <summary>
            Model of an Instrument with VISA interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.Instrument.Model">
            <summary>
            e.g. FSW or NRP. If InstrumentSettings.IdentificationModelFullName == true, the Model is FSW26 or NRP67A
            If one of the InstrumentSettings.ModelAliases fit, the Model will have the name of the alias
            In that case, the property ModelForErrMessages will have the value '%s'(Physical name '%s') e.g. 'FSW'(Physical name 'FSV3000')
            The purpose is for the driver to treat the FSV3000 exactly like the FSW, but still report the physical name in exception messages.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Instrument.ModelForErrMessages">
            <summary>
            Instrument Model string used in all exception messages
            If no InstrumentSettings.ModelAliases fit, the ModelForErrMessages is '%s' where %s is Model
            If one of the Aliases fit, the ModelForErrMessages is '%s1'(Physical name '%s2') e.g. 'FSW'(Physical name 'FSV3000')
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.ViReadStbVisaTimeoutMs">
            <summary>
            Any positive number changes VISA Timeout for the duration of STB polling
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.SessionType">
            <summary>
            Session type: Gpib, Serial, Vxi11, Hislip, Socket, Usb
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.ReadDelay">
            <summary>
            Delay before each Read()
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.WriteDelay">
            <summary>
            Delay before each Write()
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.IdnString">
            <summary>
            Use only in Simulation mode. This sets/reads the instrument's *IDN? string.
            The *IDN? string is immediately parsed for properties Manufacturer, Model, SerialNumber, FirmwareRevision
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.Simulating">
            <summary>
            True: Instrument in simulation mode
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.VisaManufacturer">
            <summary>
            Manufacturer of VISA used by the instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.InstrumentOptionsString">
            <summary>
            Simulation mode *OPT? response. This is set-only property to apply a new instrument options string.
            In real mode, the actual *OPT? response it parsed.
            The string is parsed with the parse mode defined in InstrumentProperties when initializing the Instrument.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.VisaTimeoutMs">
            <summary>
            VISA Timeout
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.LoggingEnabled">
            <summary>
            Logging of the VISA communication
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.LoggingDebugMessages">
            <summary>
            Logger debug messages to include source information
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:IVINET.Internal.Instrument.BinaryFloatNumbersFormat">
            <summary>
            Defines the coding of floating-point numbers in binary data
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.BinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of integer numbers in binary data
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.RecogniseScalarNumberBinFormat">
            <summary>
            If true (default value), the driver also recognises binary responses on scalar number queries (Int32 and Double)
            Only works in VXI-capable sessions. For non-VXI-capable sessions, this setting is coerced to false
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.InstrOptions">
            <summary>
            Instrument Options object for installed option-checking operations
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.#ctor(System.String,System.Boolean,IVINET.Internal.InstrumentSettings)">
            <summary>
            Opening an instrument session. If simulate is true, it cannot be later switched to false anymore
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ToString">
            <summary>
            String representation of the object: "Instrument {vendor}, {Session Kind}, '{resource name}'"
            </summary>        
        </member>
        <member name="M:IVINET.Internal.Instrument._QueryOptionsAndParse(IVINET.Internal.InstrOptionsParseMode)">
            <summary>
            Queries *OPT? and creates a new instance of the InstrumentOptions
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._ParseIdnString(System.String)">
            <summary>
            Parse the *IDN? response to Manufacturer, Model, SerialNumber and FirmwareRevision
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._ParseErrorQueryResponse(System.String)">
            <summary>
            Parses entered response string to ErrorQueryResult structure
            response is in a a form '-110,"Command error"'
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._QueryBinaryDataBlock(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._QueryBinaryDataBlockWithOpc(System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.BinOrAsciiData_To_ScalarInteger(System.Byte[])">
            <summary>
            Converts input data to int32
            Recognises ASCII or BIN format
            In case of binary format, the decoding is defined by the BinaryIntegerNumbersFormat settings
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.BinOrAsciiData_To_ScalarFloat(System.Byte[])">
            <summary>
            Converts input data to double
            Recognises ASCII or BIN format
            In case of binary format, the decoding is defined by the BinaryFloatNumbersFormat settings
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SetOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Sets new Instrument OPC Timeout in milliseconds and returns the old value.
            Values null, 0, or any negative number leave the OPC timeout unchanged
            Returns old OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SetOpcTimeout(System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Sets new Instrument OPC Timeout entered as PrecisionTimeSpan and returns the old value in milliseconds.
            Value of null leaves the OPC timeout unchanged
            Returns old OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.GetOpcTimeout">
            <summary>
            Returns the Instrument's OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ResetRegistersEseSre">
            <summary>
            Resets the status of ESE and SRE registers to default values
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.FitsIdnPattern(System.Boolean,System.String[],System.String[])">
            <summary>
            Checks the instrument's IdnString against the provided patterns.
            Throws an exception, if none of the patterns in the array are found in the instrument's IdnString.
            If regex is false, the idnPatterns are searched literately. If it is true, each idnPatterns is considered to be a Regular expression.
            supportedInstrumentModels is a List of instrument models used only for exception message
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.FitsIdnPattern(System.Boolean,System.String,System.String[])">
            <summary>
            Checks the instrument's IdnString against the provided patterns.
            Throws an exception, if the idnPattern is not found in the instrument's IdnString.
            If regex is false, the idnPattern is searched literately. If it is true, the idnPattern is considered to be a Regular expression.
            supportedInstrumentModels is a List of instrument models used only for exception message
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAndClearEsr">
            <summary>
            Sends "*ESR? query to reset the clear-on-read bits of the Event Status Register
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SelfTest">
            <summary>
            Perform standard self test by sending *TST? query
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.DefaultCheckStatus">
            <summary>
            Throws InstrumentStatusException in case of an error in the instrument's error queue.
            The procedure is skipped, if the QueryInstrumentStatus is set to false.
            This method is called by Status.Check() by default if the delegate _checkStatusDelegate has not been changed.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.CheckStatus">
            <summary>
            Check status method to be used publicly
            It calls either DefaultCheckStatus() or another method if defined by SetNewCheckStatusDelegate()
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SetNewCheckStatusDelegate(IVINET.Internal.CheckStatusDelegate)">
            <summary>
            Assigning a new Check status delegate. If you enter null, the default one is used
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.IsInstrumentModel(System.String)">
            <summary>
            Returns true, if the current instrument model fits the entered string
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ClearStatus">
            <summary>
            Clears instrument's status subsystem
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Reset">
            <summary>
            Sends *RST to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryErrorsAll">
            <summary>
            Uses SYSTEM:ERROR? query in a loop to read and delete all the errors in the instrument's error queue
            If no error is present, the method returns an empty collection
            Returns a collection of all read errors
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryErrorLast">
            <summary>
            Uses SYSTEM:ERROR? query to read and delete the last error in the instrument's error queue.
            If no error is present, the method returns {code=0, msg='No Error'}
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Write(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithWai(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Writes command with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ReadUnknownLength">
            <summary>
            Reads all the available data as bytes from instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Query(System.String)">
            <summary>
            Sends a query and reads the raw response from the instrument.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryString(System.String)">
            <summary>
            Sends a query and reads the response from the instrument.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Queries raw data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Query string with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Query response from instrument with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryInt32(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int32.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryInt32WithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Int32 synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryInt64(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int64
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryDouble(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Double.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryDoubleWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Double synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBoolean(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Boolean
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBooleanWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Boolean synchronised with OPC.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as an array of comma-separated strings
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAsciiDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated double numbers
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAsciiInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated int numbers.
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAsciiBooleanArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated booleans
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header and the binary data from the stream.
            Enter the command without the binary data header
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteBinaryDataBlock(System.String,System.Byte[])">
            <summary>
            Writes all the data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the binaryDataBlock input.
            Enter the command without the binary data header
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlock(System.String)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Queries binary data block and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlockWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlockWithOpc(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization, and returns it in the entered Stream. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiIntegerArray(System.String)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiIntegerArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.AddLogger(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.RemoveLogger(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteStringToLog(System.String)">
            <summary>
            Writes string message to log
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Close">
            <summary>
            Close communication
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentOptions._optionsList">
            <summary>
            Option strings sorted by the option number in the list
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.#ctor(System.String,IVINET.Internal.InstrOptionsParseMode)">
            <summary>
            Initializes an instance with initial optionsString parsed
            </summary>
            <param name="optionsString">Option string returned by the *OPT? query</param>
            <param name="mode"> Select how to parse each element</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.ToString">
            <summary>
            Represent the object as comma-separated string
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions._InitializeFromString(System.String,IVINET.Internal.InstrOptionsParseMode)">
            <summary>
            Parses options string into a string List.
            It removes double-entries, trims the white spaces and quotations marks.
            Sorts the option by the number, starting with K0, K1, K2, ... K2000, then B0, B1 ... B2000
            </summary>
            <param name="optionsString">option string returned by the *OPT? query</param>
            <param name="mode"> Select how to parse each element</param>
            <returns>Options List</returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.IsAvailable(System.String)">
            <summary>
            Returns true, if the entered option is available
            </summary>
            <param name="option">Option to check for presence</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.IsMissing(System.String)">
            <summary>
            Returns true, if the entered option is missing
            </summary>
            <param name="option">Option to check for presence</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.GetAll">
            <summary>
            Returns all the options
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.ThrowIfMissing(System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if the entered option is missing
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.ThrowIfMissing(System.String[])">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if none of the entered options are present
            </summary>
            <param name="options">Array with option string alternatives</param>
        </member>
        <member name="T:IVINET.Internal.WaitForOpcMode">
            <summary>
            Defines OPC waiting mode used by Instrument
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.StbPolling">
            <summary>
            polling of the ReadSTB (VXI session) or *STB? (non-VXI session)
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.StbPollingSlow">
            <summary>
            Same as StbPolling, but with bigger polling pauses
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.StbPollingSuperSlow">
            <summary>
            Same as StbPolling, but with even bigger polling pauses
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.ServiceRequest">
            <summary>
            Service request mechanism with waiting for service request event
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.OpcQuery">
            <summary>
            *OPC? polling
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrBinaryFloatNumbersFormat">
            <summary>
            Defines the coding of instrument's floating-point numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Single_4bytes">
            <summary>
            4 bytes/number (FORMAT REAL,32)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Single_4bytesSwapped">
            <summary>
            4 bytes/number (FORMAT REAL,32) swapped endianness
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Double_8bytes">
            <summary>
            8 bytes/number (FORMAT REAL,64 or FORMAT REAL)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Double_8bytesSwapped">
            <summary>
            8 bytes/number (FORMAT REAL,64 or FORMAT REAL) swapped endianess
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrBinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of instrument's integer numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer32_4bytes">
            <summary>
            4 bytes/number (FORMAT INT,32)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer32_4bytesSwapped">
            <summary>
            4 bytes/number (FORMAT INT,32) swapped endianness
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer16_2bytes">
            <summary>
            2 bytes/number (FORMAT INT,16)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer16_2bytesSwapped">
            <summary>
            2 bytes/number (FORMAT INT,16) swapped endianness
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrOptionsParseMode">
            <summary>
            Mode to use for parsing the instrument's option string (*OPT? response)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.Skip">
            <summary>
            No options reading / parsing / applying
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.KeepOriginal">
            <summary>
            No parsing, just trimming white spaces
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.KeepBeforeDash">
            <summary>
            If dash is present, only the the part before dash is kept e.g. 'K200-FSH' => 'K200'
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.KeepAfterDash">
            <summary>
            If dash is present, only the part after dash is kept e.g. 'SMU200-K1' => 'K1'
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.Auto">
            <summary>
            Parses the option automatically - takes the portion before or after dash depending on sucessfull parsing K/B
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrViClearMode">
            <summary>
            Conditions to send ViClear() command
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.None">
            <summary>
            No ViClear
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.IgnoreError">
            <summary>
            If an error occurs, it is ignored
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnAll">
            <summary>
            Perform on all interfaces
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnSocket">
            <summary>
            Perform on Socket interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnSerial">
            <summary>
            Perform on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnUsb">
            <summary>
            Perform on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnGpib">
            <summary>
            Perform on GPIB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnTcpVxi">
            <summary>
            Perform on TCP-IP Vxi-11 interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnHiSlip">
            <summary>
            Perform on TCP-IP HiSLIP interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnSocket">
            <summary>
            Block on Socket interface - Blocking flag has higher priority than Execute
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnSerial">
            <summary>
            Block on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnUsb">
            <summary>
            Block on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnGpib">
            <summary>
            Block on GPIB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnTcpVxi">
            <summary>
            Block on TCP-IP Vxi-11 interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnHiSlip">
            <summary>
            Block on TCP-IP HiSLIP interface
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrDefinedInString">
            <summary>
            Flag set means the token was defined in the input options string for method ApplyOptionSettings()
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.None">
            <summary>
            No token used in the options string
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.ReadDelay">
            <summary>
            DRIVERSETUP_READDELAY
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.WriteDelay">
            <summary>
            DRIVERSETUP_WRITEDELAY
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.OpcWaitMode">
            <summary>
            DRIVERSETUP_OPCWAITMODE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.AddTermCharToWriteBinBlock">
            <summary>
            DRIVERSETUP_ADDTERMCHARTOWRITEBINBLOCK
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.AssureWriteWithLF">
            <summary>
            DRIVERSETUP_ASSUREWRITEWITHLF
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.IOsegmentSize">
            <summary>
            DRIVERSETUP_IOSEGMENTSIZE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.OpcTimeout">
            <summary>
            DRIVERSETUP_OPCTIMEOUT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.VisaTimeoutMilliseconds">
            <summary>
            DRIVERSETUP_VISATIMEOUT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.PreferRsVisa">
            <summary>
            DRIVERSETUP_PREFERRSVISA
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.ViClearExeMode">
            <summary>
            DRIVERSETUP_VICLEAREXEMODE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.ViReadStbVisaTimeout">
            <summary>
            DRIVERSETUP_VIREADSTBVISATIMEOUT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingEnabled">
            <summary>
            DRIVERSETUP_LOGGING
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingDebug">
            <summary>
            DRIVERSETUP_LOGGING_DEBUG
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingMaxBinEntryLength">
            <summary>
            DRIVERSETUP_LOGGING_MAXBINENTRYLENGTH
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingMaxAsciiEntryLength">
            <summary>
            DRIVERSETUP_LOGGING_MAXASCIIENTRYLENGTH
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.RecogniseScalarNumberBinFormat">
            <summary>
            DRIVERSETUP_RECOGNISESCALARNUMBERBINFORMAT
            </summary>
        </member>
        <member name="T:IVINET.Internal.NonVxiSessionKinds">
            <summary>
            Flags defining forced Non-Vxi Session. Used for some instruments where a session does not properly fullfills
            all the necessary VXI-11 features
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Default">
            <summary>
            Default - non-VXI sessions are always SOCKET and ASRL
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Usb">
            <summary>
            Force false for USB-TMC
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.TpcVxi">
            <summary>
            Force false for LAN
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Hislip">
            <summary>
            Force false for HISLIP
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Gpib">
            <summary>
            Force false for GPIB
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrumentSettings">
            <summary>
            Defines session-specific settings used by the Instrument class
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.WriteDelay">
            <summary>
            Delay before each Write (not valid for segmented writes)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ReadDelay">
            <summary>
            Delay before each Read (not valid for segmented reads)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ViClearExeMode">
            <summary>
            Mode upon which to perform viClear() after viOpen - you can use logical OR to combine the value
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OpcWaitMode">
            <summary>
            Wait for OPC mode, will be coerced if the communication interface does not support it
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.IOsegmentSize">
            <summary>
            Maximum read/write segment size when communicating with the instrument
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OpcTimeout">
            <summary>
            OPC timeout in milliseconds for all write/read with OPC sync operations
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.VisaTimeoutMilliseconds">
            <summary>
            VISA timeout in milliseconds for all VISA operations
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.PreferRsVisa">
            <summary>
            If true, RS VISA is preferred. If false, System Default VISA is chosen
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.AddTermCharToWriteBinBlock">
            <summary>
            If true, writing of binary data block to the instrument is ended with LF. Coerced to true for SOCKET and ASRL sessions
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.AssureWriteWithLF">
            <summary>
            If true, every write string is checked for LF at the end. If LF is missing, it is added.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.SelfTestTimeout">
            <summary>
            Timeout for Self-test procedure
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OptionsParseMode">
            <summary>
            Parsing mode for the *OPT? response
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.IdentificationModelFullName">
            <summary>
            If true, the instrument Model has the full *IDN? query name (e.g. "NRP2").
            If false, the name has only the A-Z prefix (e.g. "NRP") </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingEnabled">
            <summary>
            If true, the IO communication logging is enabled
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingDebug">
            <summary>
            If true, the IO communication logging has more detailed format including source code lines
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingMaxAsciiEntryLength">
            <summary>
            Maximal length of an ASCII IO communication logging entry until the middle part is truncated
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingMaxBinEntryLength">
            <summary>
            Maximal length of a binary IO communication logging entry until the middle part is truncated
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.BinaryFloatNumbersFormat">
            <summary>
            Defines binary data coding of instrument's floating-point numbers - used by all methods that decode binary data to an array of floating-point numbers.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.BinaryIntegerNumbersFormat">
            <summary>
            Defines binary data coding of instrument's integer numbers - used by all methods that decode binary data to an array of integer numbers.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ViReadStbVisaTimeout">
            <summary>
            If True, during STB polling sets the VISA Timeout to a small number (under 1secs) to avoid long waiting times by some instruments
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.VxiCapable">
            <summary>
            If True, during STB polling sets the VISA Timeout to a small number (under 1secs) to avoid long waiting times by some instruments
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.DefinedInString">
            <summary>
            Flag set means the token was defined in the input options string for method ApplyOptionSettings()
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.NonVxiSessions">
            <summary>
            Flags defining forced Non-Vxi Session. Used for some instruments where a session does not properly fullfills
            all the necessary VXI-11 features
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ModelAliases">
            <summary>
            List of aliases for instrument models
            Aliases expression can be used for mapping purposes.
            The Instrument.FullInstrumentModelName is matched for [physical_device_Regex]
            If matched, the Instrument.Model is changed to [alias]
            Syntax:
            [physical_device_Regex] -> [alias]
            Examples:
            To have FSWP-33 to be treated by the driver as FSVR:
            ^FSWP-33$ -> FSVR
            any FSVA to be treated as FSV:
            ^FSVA-[0-9]+$ -> FSV
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.RecogniseScalarNumberBinFormat">
            <summary>
            If set to true (default value), the driver also recognises binary responses on scalar number queries (Int32 and Double)
            Only works in VXI-capable sessions. For non-VXI-capable sessions, this setting is coerced to false
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentSettings.#ctor(IVINET.Internal.InstrViClearMode,System.Boolean,System.Int32,System.Int32,System.Int32,IVINET.Internal.WaitForOpcMode,System.Int32,System.Int32,System.Int32,IVINET.Internal.InstrOptionsParseMode,IVINET.Internal.InstrBinaryFloatNumbersFormat,IVINET.Internal.InstrBinaryIntegerNumbersFormat,IVINET.Internal.NonVxiSessionKinds)">
            <summary>
            Constructor with all mandatory parameters
            </summary>
            <param name="viClearExeMode"></param>
            <param name="identificationModelFullName"></param>
            <param name="writeDelay"></param>
            <param name="readDelay"></param>
            <param name="ioSegmentSize"></param>
            <param name="opcWaitMode"></param>
            <param name="opcTimeout"></param>
            <param name="visaTimeoutMilliseconds"></param>
            <param name="selfTestTimeout"></param>
            <param name="optionsParseMode"></param>
            <param name="binaryFloatNumbersFormat"></param>
            <param name="binaryIntegerNumbersFormat"></param>
            <param name="nonVxiSessions"></param>
        </member>
        <member name="M:IVINET.Internal.InstrumentSettings.AddModelAlias(System.String)">
            <summary>
            Adds a model alias expression
            Syntax:
            [physical_device_Regex] -> [alias]
            Examples:
            To have FSWP-33 to be treated by the driver as FSVR:
            ^FSWP-33$ -> FSVR
            any FSVA to be treated as FSV:
            ^FSVA-[0-9]+$ -> FSV
            <para>If you specify a capturing group, the error message value will contain the value in that capturing group.</para>
            </summary>
            <param name="aliasExpr"></param>
        </member>
        <member name="M:IVINET.Internal.InstrumentSettings.ApplyOptionSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Apply settings to Property fields
            </summary>
            <param name="settings">Settings in Dictionary. Only the relevant ones for InstrumentProperties are set</param>>
        </member>
        <member name="T:IVINET.Internal.IRCValue">
            <summary>
            Base interface of driver classes
            </summary>
        </member>
        <member name="P:IVINET.Internal.IRCValue.RCName">
            <summary>
            Name of the RepCap e.g. 'Window'
            </summary>
        </member>
        <member name="P:IVINET.Internal.IRCValue.RCKey">
            <summary>
            RepCap Key value e.g. 'Win1'
            </summary>
        </member>
        <member name="P:IVINET.Internal.IRCValue.Parent">
            <summary>
            Parent RepCap
            </summary>
        </member>
        <member name="T:IVINET.Internal.RangeTable">
            <summary>
            Range table class
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTable.GetDiscreteCommand(System.Int32)">
            <summary>
            Converting from an integer number to a command string
            Used in sending attribute commands with Int32 data types and defined Discrete RangeTables
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RangeTable.GetCommand(IVINET.Internal.Attr,System.Object)">
            <summary>
            Translates a number into command string. It is allowed only for discrete range table and
            value data type Int32, Int64 and Real64
            </summary>
            <param name="at"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RangeTable.GetValue(IVINET.Internal.Attr,System.String)">
            <summary>
            Translates command string into value. It is allowed only for discrete range table and
            data value type Int32, Int64, Real64
            </summary>
            <param name="at"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RangeTable.Check(IVINET.Internal.Attr,System.Object)">
            <summary>
            Checks value against range table definition. Range table could be ranged, discrete.
            Value type could be Int32, Int64, Real64
            </summary>
            <param name="at"></param>
            <param name="value"></param>
        </member>
        <member name="M:IVINET.Internal.RangeTable.Coerce(IVINET.Internal.Attr,System.Object,System.Object@)">
            <summary>
            This function performs the default actions for coercing a value
            for the Real64, Int32 and Int64 data value type
            </summary>
            <param name="at">Attribute</param>
            <param name="value">Value</param>
            <param name="coercedValue">Coerced Value</param>
        </member>
        <member name="T:IVINET.Internal.RangeTableEntry">
            <summary>
            Range table entry
            </summary>
        </member>
        <member name="T:IVINET.Internal.RangeTableType">
            <summary>
            Type of range table
            </summary>
        </member>
        <member name="T:IVINET.Internal.RC`1">
            <summary>
            Repeated capability class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IVINET.Internal.RC`1._dict">
            <summary>
            Dictionary of interfaces of repeated capabilities and keys (key => C)
            </summary>
        </member>
        <member name="F:IVINET.Internal.RC`1._owner">
            <summary>
            Interface who owns repeated capability
            </summary>
        </member>
        <member name="F:IVINET.Internal.RC`1._core">
            <summary>
            Core
            </summary>        
        </member>
        <member name="F:IVINET.Internal.RC`1._createClass">
            <summary>
            Delegate for creating class with implemented interface T
            </summary>
        </member>
        <member name="M:IVINET.Internal.RC`1.#ctor(System.String,IVINET.Internal.IRCValue,IVINET.Internal.CreateClass,IVINET.Internal.Core)">
            <summary>
            
            </summary>
            <param name="name">Name of repeated capability e.g. 'Channel'</param>
            <param name="owner">Interface who owns the instance of repeated capability</param>
            <param name="createClass">Delegate which creates instance of class which implements interface T</param>
            <param name="core">Core</param>
        </member>
        <member name="M:IVINET.Internal.RC`1.Create(System.String,System.String)">
            <summary>
            Creates a new RepCap member
            </summary>
            <param name="key">Key name, e.g. 'Win1'</param>
            <param name="value">Command value e.g. '1'</param>
        </member>
        <member name="M:IVINET.Internal.RC`1.Remove(System.String)">
            <summary>
            Removes the RepCap member with the given key name
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:IVINET.Internal.RC`1.Clear">
            <summary>
            Clears oll the members keys-commands
            </summary>
        </member>
        <member name="P:IVINET.Internal.RC`1.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key">Key of repeated capability</param>
            <returns>Interface of repeated capability</returns>
        </member>
        <member name="M:IVINET.Internal.RC`1.GetEnumerator">
            <summary>
            Standard enumerator for the RC object
            </summary>
            <returns></returns>
        </member>
        <member name="P:IVINET.Internal.RC`1.Count">
            <summary>
            The number of repeated capability instances. 
            </summary>
        </member>
        <member name="P:IVINET.Internal.RC`1.Name">
            <summary>
            The repeated capability physical identifier.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RC`1.GetName(System.Int32)">
            <summary>
            Return the n-th identification name
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.RCItem">
            <summary>
            Repeated capability item
            </summary>
        </member>
        <member name="T:IVINET.Internal.RCItemCollection">
            <summary>
            Collection of repeated capability items
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCItemCollection.GetItemByName(System.String,System.Boolean)">
            <summary>
            Return RCItem searched by name. If not found, returns null.
            </summary>
            <param name="rcName">Name by which to search for the RCItem</param>
            <param name="throwException">Throw exception if not found</param>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.RCManager">
            <summary>
            Manager of Repeated Capabilities.
            Holds and resolves Virtual Names and Physical Names
            Holds a dictionary with all the RepCaps. Key = RepCap Name, Value = RepCap
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.CreateRC">
            <summary>
            Overwritten by RCManagerEx where the driver's repcaps are initiated
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.SetVirtualNames(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Assign config store Virtural Names
            </summary>
        </member>
        <member name="P:IVINET.Internal.RCManager.Item(System.String)">
            <summary>
            Returns RepCap of the desired name
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.Check(System.String,System.String)">
            <summary>
            Checks 2 levels:
            - If the RepCap with name exist
            - If the RepCap{name} contains the key. Key can also be a Virtual Name
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.Check(IVINET.Internal.RCItem)">
            <summary>
            Checks if the repcap RCItem exists in the list of all repcaps.
            First, it checks if the 'RCItem.name' exists in the list of the names known to the RCmanager
            Then, it checks whether the 'RCItem.key' exists in the list of the RepCap pairs
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.IsVirtualName(System.String)">
            <summary>
            Returns true, if the key is a virtual name
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.ResolveVirtualName(System.String)">
            <summary>
            If the key is a Virtual Name, the method returns the resolved Physical Name
            Otherwise returns the same value as entered
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.GetValue(System.String,System.String)">
            <summary>
            Returns value based on the RepCap name and key.
            Key can also be a Virtual Name
            The method throws SelectorNameException if the name or key is invalid
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.CollectRCItems(IVINET.Internal.IRCValue)">
            <summary>
            Collecting of all the RCitems, going back to the top parent
            The item.RCKey is always a physical name, therefore the collecting process does not work with Virtual Names
            </summary>
        </member>
        <member name="M:IVINET.Internal.RCManager.AssertNameAndKeyExist(System.String,System.String)">
            <summary>
            Throws an exception if the RC name or key do not exist.
            </summary>
        </member>
        <member name="T:IVINET.Internal.RepeatedCapability">
            <summary>
            Repeated capability class containing name and keys/values pairs in a dictionary
            </summary>
        </member>
        <member name="F:IVINET.Internal.RepeatedCapability._repCapPairs">
            <summary>
            List of allowed repeated capability keys -> values
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepeatedCapability.Name">
            <summary>
            Name of repeated capability
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Initialized from the RcManagerEx
            </summary>
            <param name="name"></param>
            <param name="allowedKeys"></param>
            <param name="allowedValues"></param>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.ToString">
            <summary>
            Displaying the object as: "Channel: 5 values - 'CH0', 'CH1', 'CH2', 'CH3', 'CH4'
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.GetKeysList">
            <summary>
            Returns quoted Keys list in " | " separated string
            e.g. "CH0 | CH1 | CH2 | CH3"
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.Check(System.String)">
            <summary>
            Checks if the RepCap key exists.
            Virtual key names are not considered, they are solved already in the RC class.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.Create(System.String,System.String)">
            <summary>
            Creates a new RepCap key with the value
            If it already exists, no changes are made
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.Remove(System.String)">
            <summary>
            Removes the RepCap key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.Clear">
            <summary>
            Clears all the RepCap keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.GetValue(System.String)">
            <summary>
            Returns the value of the RepCap key
            <para>!!! Does not resolve the Virtual Names !!!</para>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RepeatedCapability.GetEnumerator">
            <summary>
            Enumerator for the RepCap keys Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.StreamLogger">
            <summary>
            This class implements the general stream logging
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._loggers">
            <summary>
            List of streams
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._stopWatch">
            <summary>
            Timer for measuring the durations
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._blocking">
            <summary>
            Logging blocker.
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._previousLoggedLine">
            <summary>
            Last line source logged
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.MaxBinEntryLength">
            <summary>
            Maximum size of the binary data before they are truncated
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.MaxAsciiEntryLength">
            <summary>
            Maximum size of the ASCII data before they are truncated
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._loggingLastLineTime">
            <summary>
            Last line source logged
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.LoggingEnabled">
            <summary>
            This sets or gets logging state
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.LoggingDebugEnabled">
            <summary>
            This sets or gets logging with source state
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.#ctor">
            <summary>
            Constructor for the Logger class
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger._ComposeLogString(System.String,System.String)">
            <summary>
            Creates new log line with time stamp and the info / log message
            </summary>
            <param name="infoMessage"></param>
            <param name="logMessage"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.StreamLogger._ResponseStringToLogEntry(System.String)">
            <summary>
            Replaces the white-space characters with escape characters and truncates the response to a maximum of _maxAsciiDataSize (2048) bytes
            </summary>
            <param name="response">Response to correct</param>
            <returns>Corrected response</returns>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.BlockNextLogEntry">
            <summary>
            Blocks the next Log/LogBinaryData entry
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Add(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Remove(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.TimerStart">
            <summary>
            Starts the timer what will be later used  by the Log() method for calculating the duration
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Log(System.String,System.String,System.String)">
            <summary>
            Logging of a query or read: "sent -> received" or "-> received" with the received string adjusted
            </summary>
            <param name="infoMessage"></param>
            <param name="sent">Sent command/query</param>
            <param name="received">Response</param>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Log(System.String,System.String,System.Int32,System.String)">
            <summary>
            Logging of an array query: "sent -> Size %d: received" with the received string adjusted
            </summary>
            <param name="infoMessage"></param>
            <param name="sent">Sent command/query</param>
            <param name="size">Response size or number of array elements</param>
            <param name="received">Response</param>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.LogBinaryData(System.String,System.String,System.Byte[])">
            <summary>
            Writes a binary data to all log streams in hexadecimal format
            </summary>
            <param name="infoMessage">Specifies the type of message, usually "viWrite" or "viRead"</param>
            <param name="sent">Sent command/query</param>
            <param name="binaryData">Binary data</param>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Log(System.String,System.String)">
            <summary>
            Writes a message to all log streams
            </summary>
            <param name="infoMessage">Specifies the type of message, usually "viWrite" or "viRead"</param>
            <param name="logMessage">Logging message</param>
        </member>
        <member name="T:IVINET.Internal.StringExtensionMethods">
            <summary>
            Extension methods for string class
            </summary>
        </member>
        <member name="T:IVINET.Internal.StringExtensionMethods.TrimStringMode">
            <summary>
            Trimming mode:
            WhiteCharsAllQuotes: Remove white chars and all quotes,
            WhiteCharsSingleQuotes: Remove white chars and single quotes
            WhiteCharsSingleQuotes: Remove white chars and double quotes
            WhiteCharsOnly: Remove white chars only - same as string.Trim() method
            </summary>
        </member>
        <member name="F:IVINET.Internal.StringExtensionMethods.TrimStringMode.WhiteCharsAllQuotes">
            <summary>
            Remove white chars and all quotes
            </summary>
        </member>
        <member name="F:IVINET.Internal.StringExtensionMethods.TrimStringMode.WhiteCharsSingleQuotes">
            <summary>
            Remove white chars and single quotes
            </summary>
        </member>
        <member name="F:IVINET.Internal.StringExtensionMethods.TrimStringMode.WhiteCharsDoubleQuotes">
            <summary>
            Remove white chars and double quotes
            </summary>
        </member>
        <member name="F:IVINET.Internal.StringExtensionMethods.TrimStringMode.WhiteCharsOnly">
            <summary>
            Remove white chars only - same as string.Trim() method
            </summary>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.TrimStringResponse(System.String,IVINET.Internal.StringExtensionMethods.TrimStringMode)">
            <summary>
            Trims instrument string response.
            In modes WhiteCharsAllQuotes,WhiteCharsSingleQuotes,WhiteCharsDoubleQuotes:
            All the symmetrical leading and trailing quotation marks are trimmed,
            but only if there are none in the remaining text.
            </summary>
            <param name="text">Text to trim</param>
            <param name="mode">Trimming mode</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.GetFirstLine(System.String)">
            <summary>
            Unifies all the EOL characters to LF and returns only the first line
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.ParseNameValueToken(System.String,System.String@,System.String@)">
            <summary>
            Parses a string in a form "keyName = keyValue"
            </summary>
            <param name="text">Text to parse</param>
            <param name="keyName">Returned Key Name</param>
            <param name="keyValue">Returned Key Value</param>
            <returns>True, if successfully parsed</returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.EndsWithLF(System.String)">
            <summary>
            The fastest way to check whether a string ends with a LineFeed
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.ContainsQuestionMark(System.String)">
            <summary>
            The fastest way to check whether a string contains Question-mark
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.RsDrvFormat">
            <summary>
            Conversion methods between string - double - boolean - integer values
            </summary>
        </member>
        <member name="F:IVINET.Internal.RsDrvFormat.Number">
            <summary>
            Decimal formatting object for the driver - comma as fractional part separator
            </summary>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.#cctor">
            <summary>
            Constructor of the static class
            </summary>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToBoolean(System.String)">
            <summary>
            Converts string to boolean
            </summary>
            <param name="value"></param>
            <returns>true or false boolean value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDouble(System.String,System.Nullable{System.Double})">
            <summary>
            Converts string to Double value. Also recognizes case insensitive "NAN", "+Inf", "-Inf"
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts string to Int32 value.
            Also recognizes case insensitive "NAN"(=Int32.MinValue), "+Inf"(=Int32.MaxValue), "-Inf"(=Int32.MinValue)
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Integer32 value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt64(System.String,System.Nullable{System.Int64})">
            <summary>
            Converts string to Int64 value.
            Also recognizes case insensitive "NAN"(=Int64.MinValue), "+Inf"(=Int64.MaxValue), "-Inf"(=Int64.MinValue)
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Integer64 value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDoubleString(System.Double)">
            <summary>
            Converts double number to string using {0:g} formatter
            </summary>
            <param name="number">double number to convert to string</param>
            <returns>converted double number to string</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToBooleanString(System.Boolean)">
            <summary>
            Converts Boolean to string using ? "ON" : "OFF"
            </summary>
            <param name="number">boolean to convert to string</param>
            <returns>converted boolean as "ON" / "OFF" string</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Converts string with comma-separated values to array of Doubles
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            Also recognizes case insensitive "NAN", "+Inf", "-Inf"
            If the text is null or empty, the method returns an 0-size array
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts string with comma-separated values to array of int values.
            Also recognizes case insensitive "NAN"(=Int32.MinValue), "+Inf"(=Int32.MaxValue), "-Inf"(=Int32.MinValue)
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            If the text is null or empty, the method returns an 0-size array
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToBooleanArray(System.String)">
            <summary>
            Converts string with comma-separated values to array of Booleans
            If the text is null or empty, the method returns an 0-size array
            </summary>
            <param name="text">Text to convert</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.PassFailToTrueFalse(System.String)">
            <summary>
            Converts string Pass/Fail to boolean True/False. Case Insensitive
            </summary>
            <param name="value">Pass/Fail string</param>
            <returns>true for "Pass" / "Passed", false for "Fail" / "Failed"</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToFloat32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Floats.
            The array is returned as double[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of float32 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDouble64Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 8 Bytes/Number array of Doubles.
            The array is returned as double[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of double64 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Integers.
            The array is returned as int32[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Integer array of int32 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt16Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 2 Bytes/Number array of Integers.
            The array is returned as int32[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Integer array of int16 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToArrayOfFloatNumbers(System.Byte[],IVINET.Internal.InstrBinaryFloatNumbersFormat)">
            <summary>
            Decodes binary data to an array of floating-point numbers based on the entered format
            </summary>
            <param name="data">Binary data</param>
            <param name="binaryFloatNumbersFormat">Format in which the data is to be parsed</param>
            <returns>Array of decoded floating-point numbers always returned as doubles</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToArrayOfIntegerNumbers(System.Byte[],IVINET.Internal.InstrBinaryIntegerNumbersFormat)">
            <summary>
            Decodes binary data to an array of integer numbers based on the entered format
            </summary>
            <param name="data">Binary data</param>
            <param name="binaryIntegerNumbersFormat">Format in which the data is to be parsed</param>
            <returns>Array of decoded integer numbers always returned as int32</returns>
        </member>
        <member name="T:IVINET.Internal.ConvertObject">
            <summary>
            Static class for converting to simple data types
            </summary>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToBoolean(System.Object)">
            <summary>
            Casting object type to boolean with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>boolean value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToString(System.Object)">
            <summary>
            Casting object type to string with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>string value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToInt32(System.Object)">
            <summary>
            Casting object type to integer32 with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>Int32 value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToInt64(System.Object)">
            <summary>
            Casting object type to integer64 with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>Int64 value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToDouble(System.Object)">
            <summary>
            Casting object type to Double with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToPrecisionTimeSpanMilliseconds(System.Int32)">
            <summary>
            Converts Milliseconds to PrecisionTimeSpan
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToMilliseconds(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Converts PrecisionTimeSpan to Milliseconds
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.Visa">
            <summary>
            Wrapper for C - based visa32.dll
            </summary>
        </member>
        <member name="T:IVINET.Internal.Visa.VisaNative">
            <summary>
            Wrapper for C - based Default VISA
            </summary>
        </member>
        <member name="T:IVINET.Internal.Visa.RsVisaNative">
            <summary>
            Wrapper for C - based Rs VISA
            </summary>
        </member>
        <member name="T:IVINET.Internal.Visa.ViEventType">
            <summary>
            Event Types. Only the ones used (SRQ and All) are defined in this enum
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ViEventType.None">
            <summary>
            Null element
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ViEventType.ViEventServiceRequest">
            <summary>
            Service request event
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ViEventType.ViAllEnabledEvents">
            <summary>
            Enabled all events
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ViAttrTmoValue">
            <summary>
            This is attribute names for function viSetAttribute and viGetAttribute
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._rmSession">
            <summary>
            Resource Manager session handle
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._session">
            <summary>
            Instrument session handle
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ResourceName">
            <summary>
            Resource string
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._buffer">
            <summary>
            buffer for reading from instrument
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.VisaManufacturer">
            <summary>
            Visa Manufacturer string
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.InterfaceType">
            <summary>
            Interface type of the session - VXI-11, HiSLIP, GPIB, SOCKET, ASRL, USB
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ResourceClass">
            <summary>
            Resource class string e.g. 'INSTR' or 'USB'
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.TimeoutMs">
            <summary>
            VISA timeout in milliseconds
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.ReadTermCharacterEnabled">
            <summary>
            Enable termination character when Reading
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.ReadTermCharacter">
            <summary>
            Define termination character when Reading
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.SendEndEnable">
            <summary>
            Send End Enable when Writing
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.SerialSendEndIn">
            <summary>
            Serial Port Send End In
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.SerialSendEndOut">
            <summary>
            Serial Port Send End Out
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.IsHislip">
            <summary>
            Checks whether the TCPIP session is HiSLIP
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.ReadBufferSize">
            <summary>
            Size of the internal buffer used for all read operations
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for the VISA object
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.ToString">
            <summary>
            String representation of the object: "Visa {manufacturer}, {ResourceClass}, '{resource name}'"
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._GetVISAStatusDesc(System.Int32)">
            <summary>
            Converts the status code into human-readable message
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._ThrowOnError(System.Int32,System.String)">
            <summary>
            Error handler for all the VISA IOException()
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._MoreDataIsAvailable(System.Int32)">
            <summary>
            Returns true, if entered status code indicates that more data might be available
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadToStream(System.IO.Stream,System.Int32,System.Boolean@)">
            <summary>
            Read count number of bytes to the entered stream
            moreDataAvailable returns true, if the more data is to expected
            Returns actual number of bytes read
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.WriteFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes bytes from Stream
            Returns actual number of bytes written
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.GetAttributeInt(System.UInt32)">
            <summary>
            Get Attribute of Int32 type
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.SetAttributeInt(System.UInt32,System.Int32)">
            <summary>
            Set Attribute of Int32 type
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.GetAttributeString(System.UInt32)">
            <summary>
            Get Attribute of string type
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Dispose">
            <summary>
            Disposing method
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Dispose(System.Boolean)">
            <summary>
            Disposing method with action
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Close">
            <summary>
            Close communication
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Clear">
            <summary>
            Calling viClear() method
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._Write(System.Byte[])">
            <summary>
            Writes binary buffer to instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._Read(System.Int32,System.Boolean@,System.Int32@)">
            <summary>
            Reads data from instrument with defined maxCount.
            The maxCount value cannot exceed the _buffer.Length
            WARNING!!! - the returned buffer is an internal buffer with the fixed size (100000 bytes)
            The relevant part is only the one indicated by the readCount
            moreDataAvailable returns true, if the more data is to expected
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadByte">
            <summary>
            Reads single byte
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadStb">
            <summary>
            Reads Status Byte using viReadSTB()
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.EnableSrqEvent">
            <summary>
            Enables Service Request Event
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.DisableSrqEvent">
            <summary>
            Disables Service Request Event
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.DiscardAllEnabledEvents">
            <summary>
            Flushes all the existing events
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.DiscardAllSrqEvents">
            <summary>
            Flushes all the existing SRQ events
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.WaitOnSrqEvent(System.Int32,System.Boolean)">
            <summary>
            Waits on Service Request Event.
            If a timeout occurs, the method returns true
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession">
            <summary>
            VISA communication class expanded for advanced write/read/synchronization methods
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.SessionKind">
            <summary>
            Session type constructed from the VISA interfaceType and ResourceClass parameters
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Unsupported">
            <summary>
            Unrecognised session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Gpib">
            <summary>
            GPIB session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Serial">
            <summary>
            Serial interface session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Vxi11">
            <summary>
            LAN VXI-11 session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Hislip">
            <summary>
            LAN HiSlip session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Socket">
            <summary>
            LAN Socket session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Usb">
            <summary>
            USB-TMC session
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.ReadDataType">
            <summary>
            Data type detected when reading
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.STatusByte">
            <summary>
            Instrument's STatus Byte flags
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.EventStatusRegister">
            <summary>
            Event Status Register flags. Only the ones actually used (OPC flag) are defined here.
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.VxiCapable">
            <summary>
            Signals whether the session is VXI-capable
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.ViReadStbVisaTimeoutMilliseconds">
            <summary>
            If positive, the VISA timeout changes to this number before each ReadSTB
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.OpcTimeoutMs">
            <summary>
            Operation Complete Timeout in Milliseconds
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.WriteDelay">
            <summary>
            Delay in Milliseconds applied before each VISA Write
            In case of chunked write, the delay applies only to the first write
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.ReadDelay">
            <summary>
            Delay in Milliseconds applied before each VISA Read
            In case of chunked read, the delay applies only to the first read
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.FastSweep">
            <summary>
            If true, checking of the OPC bit in the Event Status Register is done by ReadSTB function
            If false, checking of the OPC bit in the Event Status Register is done by *STB? query
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionType">
            <summary>
            Type of the VISA session
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.#ctor(System.String,IVINET.Internal.InstrumentSettings)">
            <summary>
            Constructor for the VisaSession
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ToString">
            <summary>
            String representation of the object: "Instrument {vendor}, {Session Kind}, '{resource name}'"
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ResolveOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Returns integer value of OpcTimeoutMs property, if the input nullable value is null, 0, or less than 0.
            Otherwise returns the input value.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._DelayBeforeWrite">
            <summary>
            Delay Writing by defined number of milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._DelayBeforeRead">
            <summary>
            Delay Reading by defined number of milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._SetRegistersEseSre(IVINET.Internal.WaitForOpcMode)">
            <summary>
            Sets the ESE and SRE registers based on the entered WaitForOpcMode
            Returns coerced WaitForOpcMode
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._FlushJunkData(System.Boolean)">
            <summary>
            Reads junk bytes to clear the instrument's output buffer
            If totalFlush is true, the method tries to completely flush the data. If false, after several reads throws DataTooLong exception
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadDataUnknownLengthToStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Segmented reading of unknown-length data into a Stream.
            For Socket and Serial interfaces this method only works if the ReadTermCharacterEnabled is True
            segmentSize is the maximum size of one read segment
            binTransfer signals that the data are binary - used for generating errors on non-VXI11 interfaces
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadDataKnownLengthToStream(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Segmented reading of known-length data into a Stream. Maximum size of the data is Int32.MaxValue
            segmentSize is the maximum size of one read segment
            length is the expected length of data
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadCopy(System.Int32,System.Boolean@)">
            <summary>
            Reads from instrument with maximum defined length.
            The maxLength value cannot exceed the VISA's _buffer.Length (100000 bytes)
            Returns only the relevant bytes in a copied buffer
            !!! Does not wait ReadDelay
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadString(System.Int32,System.Boolean@)">
            <summary>
            Read string from instrument with maximum defined length.
            The maxLength value cannot exceed the VISA's _buffer.Length (100kB)
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadChar">
            <summary>
            Reads single character
            !!! Does not wait ReadDelay
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadUnknownLength">
            <summary>
            Reads bytes from instrument with unlimited length.
            The read is performed in two steps to optimize memory use:
            The First read is performed with the fixed size of 1024 bytes.
            The Second read is then performed with 64kB segments, until all the data are read out.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadStringUnknownLength">
            <summary>
            Reads string from instrument with unlimited length.
            The read is performed in two steps to optimize memory use:
            The First read is performed with the fixed size of 1024 bytes.
            The Second read is then performed with 64kB segments, until all the data are read out.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._QueryStb">
            <summary>
            Sends *STB? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadStb(System.Boolean)">
            <summary>
            Reads viReadSTB and casts it to the STatusByte type
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._StbToString(IVINET.Internal.VisaSession.STatusByte)">
            <summary>
            Returns Human-readable representation of the status byte
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndPollStbVxi(System.String,System.Boolean,System.Int32,IVINET.Internal.VisaSession.STatusByte)">
            <summary>
            Reads Status Byte Register and ends if the ESB bit (5) is set to 1.
            This method also works with the SOCKET and SERIAL interface by sending *STB? query.
            In that case however, command cannot be a query.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndPollStbNonVxi(System.String,System.Int32,IVINET.Internal.VisaSession.STatusByte)">
            <summary>
            Queries Status Byte Register (*STB?) and ends if the ESB bit (5) is set to 1.
            The command must not be a query. This method also works with the SOCKET and SERIAL interface.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._PollingDelay(System.DateTime)">
            <summary>
            Generates progressive polling delay
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._CheckMessageAvailableAfterOpc(IVINET.Internal.VisaSession.STatusByte,System.String,System.Int32,System.String)">
            <summary>
            Used internally after _StbPolling() to check if the message is available
            Throws an exception in case of MAV not available
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._NarrowDownIOtimeoutError(System.String)">
            <summary>
            This method when called after Ivi.Driver.IOTimeoutException can narrow down the error to more specific exception
            e.g. InstrumentStatusException()
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._NarrowDownOpcToutError(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            This method when called after Ivi.Driver.MaxTimeExceededException can narrow down the error to more specific exception
            e.g. InstrumentStatusException()
            If timeoutMs is set to -1, it is taken from the current OPC Timeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._SetEseMask(IVINET.Internal.VisaSession.EventStatusRegister,System.Boolean)">
            <summary>
            Sending *ESE command with mask parameter
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._SetSreMask(IVINET.Internal.VisaSession.STatusByte,System.Boolean)">
            <summary>
            Sending *SRE command with StatusByte mask parameter
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndWaitForSrq(System.String,System.Boolean,System.Int32)">
            <summary>
            Internal method for OPC wait with ServiceRequest
            Enter the command without the *OPC
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndWaitForOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Internal method to synchronise a command with OPC. Returns the last STB value
            If isQuery is true, the command must be a query - it must contain '?'
            timeoutMs - timeout in milliseconds. Value of -1 or null means the OPC timeout is used.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndQueryOpc(System.String,System.Int32)">
            <summary>
            Writes a command and queries an *OPC? afterwards.
            Can not be used for queries.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadBinaryDataBlock(System.Boolean,System.Boolean@)">
            <summary>
            Read binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadBinaryDataBlock(System.IO.Stream,System.Boolean)">
            <summary>
            Read binary data block and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.Clear">
            <summary>
            Perform VISA.viClear conditionally based on the instrument settings
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.Write(System.Byte[])">
            <summary>
            Writes byte buffer to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.Write(System.String)">
            <summary>
            Writes string command to the instrument.
            If the session is non-VXI11, the command is appended by LF if necessary
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Internal method to synchronise a command with OPC
            timeoutMs - timeout in milliseconds. Value of -1 or null means the OPC timeout is used.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.WriteWithWai(System.String)">
            <summary>
            Writes command with *WAI synchronization.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryAndClearEsr">
            <summary>
            Sends "*ESR? query to reset the clear-on-read bits of the Event Status Register
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryShort(System.String)">
            <summary>
            Method for querying short responses of maximum 64 bytes
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryStringShort(System.String)">
            <summary>
            Method for querying short responses of maximum 64 bytes
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryUnknownLength(System.String)">
            <summary>
            Combines Write + ReadUnknownLength()
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryStringUnknownLength(System.String)">
            <summary>
            Combines Write + ReadStringUnknownLength()
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query bytes with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPCtimeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPCtimeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ClearBeforeRead">
            <summary>
            Clears IO buffers and the ESR register before reading/writing responses synchronized with *OPC;
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QuerySystemError">
            <summary>
            Returns one response to the SYSTEM:ERROR? query
            If 0,"No error is returned, the return string is null
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QuerySystemErrorAll">
            <summary>
            Returns all errors in the instrument's error queue
            Used query: "SYSTEM:ERROR?"
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ParseBinaryDataHeader(System.Boolean,System.Int32,System.Byte[]@,IVINET.Internal.VisaSession.ReadDataType@)">
            <summary>
            Parses the binary data block and returns the expected length of the following data block
            firstReadCount - minimum is 1 byte. Reads more to internal buffer and then parse it from there, the unparsed portion is then returned in unparsedPortion
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.WriteBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryBinaryDataBlock(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryBinaryDataBlock(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Queries binary data block and returns it in the entered Stream.
            Returns true, if the read data was binary block
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryBinaryDataBlockWithOpc(System.String,System.Boolean,System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPC Timeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ErrorQueueIsNotEmpty">
            <summary>
            Returns true, if error queue contains at least one error
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ResetRegistersEseSre">
            <summary>
            Resets the status of ESE and SRE registers to default values
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000.IviDCPwrOutput._AssureChannelSelected">
            <summary>
            Makes sure the channel is selected
            </summary>
        </member>
        <member name="T:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation">
            <summary>
            This class configures Basic Operation.
            
            (1) Selection Of Channel:
            This attribute selects the channels.
            
            (2) Output State:
            This attribute switches On or Off the output.
            
            (3) Settings Store Location:
            This attribute stores the settings to selected locations of
            a nonvolatile memory.
            
            (4) Settings Recall Location:
            This attribute recalls the settings from selected locations
            of a nonvolatile memory.
            
            (5) Beeper Mode:
            This attribute configures the beeper.
            
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.SelectedChannel">
            <summary>
            <para>This attribute selects the channels.</para>
            <para>Remote-control command(s):</para>
            <para>INSTrument:SELect</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.OutputEnabled">
            <summary>
            <para>Turns the channel output ON or OFF. When switching the channel ON, General</para>
            <para>output switch is also switched ON. When switching the channel OFF, General</para>
            <para>output switch is not changed. If changing the General output switch status is</para>
            <para>not desired, use the HMP4000_ATTR_OUTPUT_SELECT.</para>
            <para>Remote-control command(s):</para>
            <para>OUTPut:STATe</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.MasterEnabled">
            <summary>
            <para>Turning on / off all previous selected channels simultaneously.</para>
            <para>Remote-control command(s):</para>
            <para>OUTPut:GENeral</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.ChannelOnlyEnabled">
            <summary>
            <para>Activates or deactivates the previous selected channel. If the channel is</para>
            <para>activated the channel LED lights up green in CV (constant voltage) mode or red</para>
            <para>in CC (constant current) mode.</para>
            <para>Remote-control command(s):</para>
            <para>OUTPut:SELect</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.SettingsStoreLocation">
            <summary>
            <para>This attribute stores the settings to selected locations of a nonvolatile</para>
            <para>memory.</para>
            <para>Remote-control command(s):</para>
            <para>*SAV</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.SettingsRecallLocation">
            <summary>
            <para>This attribute recalls the settings from selected locations of a nonvolatile</para>
            <para>memory.</para>
            <para>Remote-control command(s):</para>
            <para>*RCL</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000BasicOperation.BeeperMode">
            <summary>
            <para>This attribute configures the beeper.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:BEEPer:IMMediate</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent">
            <summary>
            This class configures Voltage and Current.
            
            (1) Output Voltage Level:
            This attribute adjusts the output voltage level.
            
            (2) Output Voltage Level Step:
            This attribute configures the output voltage step value.
            
            (3) Over Voltage Protection Level:
            This attribute configures the over voltage protection (OVP).
            
            (4) Query Over Voltage Protection Status:
            This attribute queries the over voltage protection (OVP)
            status.
            
            (5) Over Voltage Protection Clear:
            This attribute clears the over voltage protection (OVP).
            
            (6) Output Current Level:
            This attribute adjusts the output current level.
            
            (7) Output Current Level Step:
            This attribute configures the output current step value.
            
            (8) Electronic Fuse State:
            This attribute switches On or Off the electronic fuse.
            
            (9) Query Electronic Fuse Status:
            This attribute queries the electronic fuse status.
            
            (10) Electronic Fuse Channel Link:
            This attribute link electronic fuse to the channel.
            
            (11) Electronic Fuse Channel Unlink:
            This attribute unlink electronic fuse from the channel.
            
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OutputVoltageLevel">
            <summary>
            <para>This attribute adjusts the output voltage level.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:VOLTage:LEVel:AMPLitude</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OutputVoltageLevelMax">
            <summary>
            <para>Queires the maximum available output voltage.</para>
            <para>Remote-control command(s):</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OutputVoltageLevelStep">
            <summary>
            <para>This attribute configures the output voltage step value.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:VOLTage:LEVel:AMPLitude:STEP:INCRement</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OverVoltageProtectionLevel">
            <summary>
            <para>This attribute configures the over voltage protection (OVP).</para>
            <para>Remote-control command(s):</para>
            <para>VOLTage:PROTection:LEVel</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OverVoltageProtectionStatus">
            <summary>
            <para>This attribute queries the over voltage protection (OVP) status.</para>
            <para>Remote-control command(s):</para>
            <para>VOLTage:PROTection:TRIPped?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OverVoltageProtectionClear">
            <summary>
            <para>This attribute clears the over voltage protection (OVP).</para>
            <para>Remote-control command(s):</para>
            <para>VOLTage:PROTection:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OutputCurrentLevel">
            <summary>
            <para>This attribute adjusts the output current level.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:CURRent:LEVel:AMPLitude</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OutputCurrentLevelMax">
            <summary>
            <para>Queries the maximum allowed current value.</para>
            <para>Remote-control command(s):</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.OutputCurrentLevelStep">
            <summary>
            <para>This attribute configures the output current step value.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:CURRent:LEVel:AMPLitude:STEP:INCRement</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.ElectronicFuseState">
            <summary>
            <para>This attribute switches On or Off the electronic fuse.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:STATe</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.ElectronicFuseStatus">
            <summary>
            <para>This attribute queries the electronic fuse status.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:TRIPped?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.ElectronicFuseChannelLink">
            <summary>
            <para>This attribute link electronic fuse to the channel.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:LINK</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.ElectronicFuseChannelUnlink">
            <summary>
            <para>This attribute unlink electronic fuse from the channel.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:UNLink</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000VoltageAndCurrent.QueryCombinedVoltageAndCurrent">
            <summary>
            <para>This function queries combined setting of voltage and current.</para>
            <para></para>
            <para>First result is Voltage Value, second is Current.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>APPLy?</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator">
            <summary>
            This class configures Arbitrary Generator.
            
            (1) Arbitrary Generator Repetition:
            No. of repetition. The maximum number of repetitions is 255.
            If 0 is selected, the waveform will be repeated indefi
            nitely.
            
            (2) Arbitrary Generator Start Channel:
            This attribute selects the channel for starting arbitrary
            generator.
            
            (3) Arbitrary Generator Stop Channel:
            This attribute selects the channel for stoping arbitrary
            generator.
            
            (4) Arbitrary Generator Data Transfer Channel:
            This attribute selects the channel where the data entered
            are sent to.
            
            (5) Arbitrary Generator Save:
            This attribute selects the storage for saving arbitrary
            generator waveform data.
            
            
            (6) Arbitrary Generator Recall:
            This attribute selects the storage for recalling arbitrary
            generator waveform data.
            
            (7) Arbitrary Generator Clear:
            This attribute selects the storage for clearing arbitrary
            generator waveform data.
            
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.Repetition">
            <summary>
            <para>No. of repetition. The maximum number of repetitions is 255. If 0 is selected,</para>
            <para>the waveform will be repeated indefi nitely.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:REPetitions</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.StartChannel">
            <summary>
            <para>This attribute selects the channel for starting arbitrary generator.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:STARt</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.StopChannel">
            <summary>
            <para>This attribute selects the channel for stoping arbitrary generator.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:STOP</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.DataTransferChannel">
            <summary>
            <para>This attribute selects the channel where the data entered are sent to.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:TRANsfer</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.Save">
            <summary>
            <para>This attribute selects the storage for saving arbitrary generator waveform data.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:SAVE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.Recall">
            <summary>
            <para>This attribute selects the storage for recalling arbitrary generator waveform</para>
            <para>data.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:RESTore</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.Clear">
            <summary>
            <para>This attribute selects the storage for clearing arbitrary generator waveform</para>
            <para>data.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:CLEar</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000ArbitraryGenerator.ConfigureArbitraryGeneratorWaveformData(System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>This function sets the parameters of the freely programmable waveforms. Set</para>
            <para>points defining voltage, current and dwell</para>
            <para>time are required.</para>
            <para></para>
            <para>A maximum of 128 set points (index 0 ... 128) may be used and</para>
            <para>will be repetitively addressed.</para>
            <para></para>
            <para>The maximum number of repetitions is 255. If Repetitons 0 is selected, the</para>
            <para>waveform will be repeated indefinitely.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:DATA &lt;voltage1, current1, time1, voltage2, ...&gt;</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.Hmp4000.IHmp4000Measurement">
            <summary>
            This class queries measurement.
            
            (1) Measurement DC Voltage:
            This attribute queries the measured voltage value.
            
            (2) Measurement DC Current:
            This attribute queries the measured Current value.
            
            
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000Measurement.DCVoltage">
            <summary>
            <para>This attribute queries the measured voltage value.</para>
            <para>Remote-control command(s):</para>
            <para>MEASure:VOLTage:DC?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000Measurement.DCCurrent">
            <summary>
            <para>This attribute queries the measured Current value.</para>
            <para>Remote-control command(s):</para>
            <para>MEASure:CURRent:DC?</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.Hmp4000.IHmp4000System">
            <summary>
            Various utility attributes.
            
            (1) System Version:
            Gets system version.
            
            (2) System Error:
            This attribute queries the earliest entry in the error
            queue, and deletes it after the readout.
            
            (3) System All Errors:
            Reads all errors from instrument.
            
            (4) Questionable Enable Register:
            This attribute configures the selected register enable
            values.
            
            (5) Questionable Instrument Enable Register:
            This attribute configures the selected register enable
            values.
            
            (6) Questionable Instrument Specific Enable Register:
            This attribute configures the selected register enable
            values.
            
            (7) Questionable Instrument Specific Condition Register:
            This attribute queries the selected register condition
            values.
            
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.SystemVersion">
            <summary>
            <para>Gets system version.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:VERSion?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.SystemError">
            <summary>
            <para>This attribute queries the earliest entry in the error queue, and deletes it</para>
            <para>after the readout.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:ERRor?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.SystemAllErrors">
            <summary>
            <para>Reads all errors from instrument.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:ERRor:ALL?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.SystemLocal">
            <summary>
            <para>Sets the system to front panel control. The front panel control is unlocked.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:LOCal</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.SystemRemote">
            <summary>
            <para>Sets the system to remote state. The front panel control is locked. By pushing</para>
            <para>the REMOTE button the front panel control will be activated. If the instrument</para>
            <para>receives a remote command it will be switched into remote control automatically</para>
            <para>(REMOTE button LED lights up).</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:REMote</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.SystemRemoteLock">
            <summary>
            <para>Sets the system to remote state. The front panel control is locked and can not</para>
            <para>be unlocked via REMOTE button). You are only able to unlock the front panel</para>
            <para>control via SCPI command SYSTem:LOCal.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:RWLock</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.SystemRemoteMix">
            <summary>
            <para>Sets the system to remote state. The front panel and remote control are possible</para>
            <para>simultaneously (mixed mode).</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:MIX</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.QuestionableEnableRegister">
            <summary>
            <para>This attribute configures the selected register enable values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:ENABle</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.QuestionableInstrumentEnableRegister">
            <summary>
            <para>This attribute configures the selected register enable values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:INSTrument:ENABle</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.IDQueryResponse">
            <summary>
            <para>Returns the ID Query response string. The instrument driver gets the value of</para>
            <para>this attribute when you pass VI_TRUE for the ID Query parameter to the</para>
            <para>hmp4000_init or hmp4000_InitWithOptions function.</para>
            <para>Remote-control command(s):</para>
            <para>*IDN?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000System.IOTimeout">
            <summary>
            <para>Thise parameter specifies the visa timeout in milliseconds.</para>
            <para>Remote-control command(s):</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.AddStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method adds the stream for logging.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.RemoveStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method removes the stream for logging.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.WriteStringToLog(System.String)">
            <summary>
            <para>Writes string message to log.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.ReadToFileFromInstrument(System.String,System.String)">
            <summary>
            <para>Is used to read data from the instrument and write it to a user specified file</para>
            <para>on the host computer.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>MMEMory:DATA? &lt;file_name&gt;</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.WriteFromFileToInstrument(System.String,System.String)">
            <summary>
            <para>Is used to read data from the host computer and write it to a user specified</para>
            <para>file in the instrument.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>MMEMory:DATA &lt;file_name&gt;</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryBinaryBlockToStream(System.String,System.IO.Stream)">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for fast</para>
            <para>fetching of binary block data.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryBinaryDataBlockToStreamWithOPCSync(System.String,System.IO.Stream,System.Int32)">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for fast</para>
            <para>fetching of binary block data. If timeout is null, -1 or 0, the current Opc</para>
            <para>Timeout is used.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.WriteBinaryBlockFromStream(System.String,System.IO.Stream)">
            <summary>
            <para>Writes IEEE binary data block from stream to instrument. You need to specify the</para>
            <para>SCPI command to prepend the binary data block.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryBool(System.String)">
            <summary>
            <para>This method queries the bool value.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryInt32(System.String)">
            <summary>
            <para>This method queries the int32 value.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryDouble(System.String)">
            <summary>
            <para>This method queries the double value.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryString(System.String)">
            <summary>
            <para>This method queries the string value.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.WriteCommandWithOPCSync(System.String,System.Int32)">
            <summary>
            <para>Sends a command to the instrument synchronised with OPC-polling. Use this</para>
            <para>function to wait for an instrument operation that can take a long time to</para>
            <para>complete, e.g. self-alignment. If timeout is null, -1 or 0, the current Opc</para>
            <para>Timeout is used.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.QueryWithOPCSync(System.String,System.Int32)">
            <summary>
            <para>Sends a query to the instrument synchronised with OPC-polling. Use this function</para>
            <para>to wait for a response that can take a long time to complete e.g.</para>
            <para>self-alignment, calibration or self-test. If timeout is null, -1 or 0, the</para>
            <para>current Opc Timeout is used.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.SelfTest">
            <summary>
            <para>Runs the instrument's self test routine.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.RevisionQuery(System.String@,System.String@)">
            <summary>
            <para>Returns the revision numbers of the instrument driver and instrument firmware,</para>
            <para>and tells the user with which instrument firmware this revision of the driver is</para>
            <para>compatible.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.Delay(System.Double)">
            <summary>
            <para>Suspends the program for the selected number of second.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.ErrorQueryAll">
            <summary>
            <para>Returns all error.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:ERRor?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.GetInstrumentOptions">
            <summary>
            <para>Returns all the instrument options.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>*OPT?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.ReadBytes">
            <summary>
            <para>Reads a complete response from the instrument.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.ReadString">
            <summary>
            <para>Reads a complete response from the instrument and returns it as a string.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.WriteBytes(System.Byte[])">
            <summary>
            <para>Write an array of bytes to the device.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.WriteString(System.String)">
            <summary>
            <para>Write a string to the device.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.Reset">
            <summary>
            <para>This function resets the instrument to a known state and sends initialization</para>
            <para>commands to the instrument. The initialization commands set instrument settings</para>
            <para>such as Headers Off, Short Command form, and Data Transfer Binary to the state</para>
            <para>necessary for the operation of the instrument driver.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>*RST</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.IHmp4000System.ClearStatus">
            <summary>
            <para>This function clears status.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>*CLS</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.Hmp4000.IHmp4000SystemChannel">
            <summary>
            Contains settings for channel.
            Implemented repeated capability (use as named index)
            Channel (CH1, CH2, CH3, CH4)
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000SystemChannel.QuestionableInstrumentSpecificEnableRegister">
            <summary>
            <para>This attribute configures the selected register enable values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:INSTrument:ISUMmary&lt;channel&gt;:ENABle</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.IHmp4000SystemChannel.QuestionableInstrumentSpecificConditionRegister">
            <summary>
            <para>This attribute queries the selected register condition values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:INSTrument:ISUMmary&lt;channel&gt;:CONDition?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.SelectedChannel">
            <summary>
            <para>This attribute selects the channels.</para>
            <para>Remote-control command(s):</para>
            <para>INSTrument:SELect</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.OutputEnabled">
            <summary>
            <para>Turns the channel output ON or OFF. When switching the channel ON, General</para>
            <para>output switch is also switched ON. When switching the channel OFF, General</para>
            <para>output switch is not changed. If changing the General output switch status is</para>
            <para>not desired, use the HMP4000_ATTR_OUTPUT_SELECT.</para>
            <para>Remote-control command(s):</para>
            <para>OUTPut:STATe</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.MasterEnabled">
            <summary>
            <para>Turning on / off all previous selected channels simultaneously.</para>
            <para>Remote-control command(s):</para>
            <para>OUTPut:GENeral</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.ChannelOnlyEnabled">
            <summary>
            <para>Activates or deactivates the previous selected channel. If the channel is</para>
            <para>activated the channel LED lights up green in CV (constant voltage) mode or red</para>
            <para>in CC (constant current) mode.</para>
            <para>Remote-control command(s):</para>
            <para>OUTPut:SELect</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.SettingsStoreLocation">
            <summary>
            <para>This attribute stores the settings to selected locations of a nonvolatile</para>
            <para>memory.</para>
            <para>Remote-control command(s):</para>
            <para>*SAV</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.SettingsRecallLocation">
            <summary>
            <para>This attribute recalls the settings from selected locations of a nonvolatile</para>
            <para>memory.</para>
            <para>Remote-control command(s):</para>
            <para>*RCL</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000BasicOperation.BeeperMode">
            <summary>
            <para>This attribute configures the beeper.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:BEEPer:IMMediate</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OutputVoltageLevel">
            <summary>
            <para>This attribute adjusts the output voltage level.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:VOLTage:LEVel:AMPLitude</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OutputVoltageLevelMax">
            <summary>
            <para>Queires the maximum available output voltage.</para>
            <para>Remote-control command(s):</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OutputVoltageLevelStep">
            <summary>
            <para>This attribute configures the output voltage step value.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:VOLTage:LEVel:AMPLitude:STEP:INCRement</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OverVoltageProtectionLevel">
            <summary>
            <para>This attribute configures the over voltage protection (OVP).</para>
            <para>Remote-control command(s):</para>
            <para>VOLTage:PROTection:LEVel</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OverVoltageProtectionStatus">
            <summary>
            <para>This attribute queries the over voltage protection (OVP) status.</para>
            <para>Remote-control command(s):</para>
            <para>VOLTage:PROTection:TRIPped?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OverVoltageProtectionClear">
            <summary>
            <para>This attribute clears the over voltage protection (OVP).</para>
            <para>Remote-control command(s):</para>
            <para>VOLTage:PROTection:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OutputCurrentLevel">
            <summary>
            <para>This attribute adjusts the output current level.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:CURRent:LEVel:AMPLitude</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OutputCurrentLevelMax">
            <summary>
            <para>Queries the maximum allowed current value.</para>
            <para>Remote-control command(s):</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.OutputCurrentLevelStep">
            <summary>
            <para>This attribute configures the output current step value.</para>
            <para>Remote-control command(s):</para>
            <para>SOURce:CURRent:LEVel:AMPLitude:STEP:INCRement</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.ElectronicFuseState">
            <summary>
            <para>This attribute switches On or Off the electronic fuse.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:STATe</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.ElectronicFuseStatus">
            <summary>
            <para>This attribute queries the electronic fuse status.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:TRIPped?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.ElectronicFuseChannelLink">
            <summary>
            <para>This attribute link electronic fuse to the channel.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:LINK</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.ElectronicFuseChannelUnlink">
            <summary>
            <para>This attribute unlink electronic fuse from the channel.</para>
            <para>Remote-control command(s):</para>
            <para>FUSE:UNLink</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000VoltageAndCurrent.QueryCombinedVoltageAndCurrent">
            <summary>
            <para>This function queries combined setting of voltage and current.</para>
            <para></para>
            <para>First result is Voltage Value, second is Current.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>APPLy?</para>
            <para>Identifier = HMP4000_FUNC_QUERY_COMBINED_VOLTAGE_AND_CURRENT</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.Repetition">
            <summary>
            <para>No. of repetition. The maximum number of repetitions is 255. If 0 is selected,</para>
            <para>the waveform will be repeated indefi nitely.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:REPetitions</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.StartChannel">
            <summary>
            <para>This attribute selects the channel for starting arbitrary generator.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:STARt</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.StopChannel">
            <summary>
            <para>This attribute selects the channel for stoping arbitrary generator.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:STOP</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.DataTransferChannel">
            <summary>
            <para>This attribute selects the channel where the data entered are sent to.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:TRANsfer</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.Save">
            <summary>
            <para>This attribute selects the storage for saving arbitrary generator waveform data.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:SAVE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.Recall">
            <summary>
            <para>This attribute selects the storage for recalling arbitrary generator waveform</para>
            <para>data.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:RESTore</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.Clear">
            <summary>
            <para>This attribute selects the storage for clearing arbitrary generator waveform</para>
            <para>data.</para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:CLEar</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000ArbitraryGenerator.ConfigureArbitraryGeneratorWaveformData(System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>This function sets the parameters of the freely programmable waveforms. Set</para>
            <para>points defining voltage, current and dwell</para>
            <para>time are required.</para>
            <para></para>
            <para>A maximum of 128 set points (index 0 ... 128) may be used and</para>
            <para>will be repetitively addressed.</para>
            <para></para>
            <para>The maximum number of repetitions is 255. If Repetitons 0 is selected, the</para>
            <para>waveform will be repeated indefinitely.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>ARBitrary:DATA &lt;voltage1, current1, time1, voltage2, ...&gt;</para>
            <para>Identifier = HMP4000_FUNC_CONFIGURE_ARBITRARY_GENERATOR_WAVEFORM_DATA</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000Measurement.DCVoltage">
            <summary>
            <para>This attribute queries the measured voltage value.</para>
            <para>Remote-control command(s):</para>
            <para>MEASure:VOLTage:DC?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000Measurement.DCCurrent">
            <summary>
            <para>This attribute queries the measured Current value.</para>
            <para>Remote-control command(s):</para>
            <para>MEASure:CURRent:DC?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.SystemVersion">
            <summary>
            <para>Gets system version.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:VERSion?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.SystemError">
            <summary>
            <para>This attribute queries the earliest entry in the error queue, and deletes it</para>
            <para>after the readout.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:ERRor?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.SystemAllErrors">
            <summary>
            <para>Reads all errors from instrument.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:ERRor:ALL?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.SystemLocal">
            <summary>
            <para>Sets the system to front panel control. The front panel control is unlocked.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:LOCal</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.SystemRemote">
            <summary>
            <para>Sets the system to remote state. The front panel control is locked. By pushing</para>
            <para>the REMOTE button the front panel control will be activated. If the instrument</para>
            <para>receives a remote command it will be switched into remote control automatically</para>
            <para>(REMOTE button LED lights up).</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:REMote</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.SystemRemoteLock">
            <summary>
            <para>Sets the system to remote state. The front panel control is locked and can not</para>
            <para>be unlocked via REMOTE button). You are only able to unlock the front panel</para>
            <para>control via SCPI command SYSTem:LOCal.</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:RWLock</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.SystemRemoteMix">
            <summary>
            <para>Sets the system to remote state. The front panel and remote control are possible</para>
            <para>simultaneously (mixed mode).</para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:MIX</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.QuestionableEnableRegister">
            <summary>
            <para>This attribute configures the selected register enable values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:ENABle</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.QuestionableInstrumentEnableRegister">
            <summary>
            <para>This attribute configures the selected register enable values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:INSTrument:ENABle</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.IDQueryResponse">
            <summary>
            <para>Returns the ID Query response string. The instrument driver gets the value of</para>
            <para>this attribute when you pass VI_TRUE for the ID Query parameter to the</para>
            <para>hmp4000_init or hmp4000_InitWithOptions function.</para>
            <para>Remote-control command(s):</para>
            <para>*IDN?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000System.IOTimeout">
            <summary>
            <para>Thise parameter specifies the visa timeout in milliseconds.</para>
            <para>Remote-control command(s):</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.AddStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method adds the stream for logging.</para>
            <para>Identifier = HMP4000_FUNC_ADD_STREAM_LOGGER</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.RemoveStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method removes the stream for logging.</para>
            <para>Identifier = HMP4000_FUNC_REMOVE_STREAM_LOGGER</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.WriteStringToLog(System.String)">
            <summary>
            <para>Writes string message to log.</para>
            <para>Identifier = HMP4000_FUNC_WRITE_STRING_TO_LOG</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.ReadToFileFromInstrument(System.String,System.String)">
            <summary>
            <para>Is used to read data from the instrument and write it to a user specified file</para>
            <para>on the host computer.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>MMEMory:DATA? &lt;file_name&gt;</para>
            <para>Identifier = HMP4000_FUNC_READ_TO_FILE_FROM_INSTRUMENT</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.WriteFromFileToInstrument(System.String,System.String)">
            <summary>
            <para>Is used to read data from the host computer and write it to a user specified</para>
            <para>file in the instrument.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>MMEMory:DATA &lt;file_name&gt;</para>
            <para>Identifier = HMP4000_FUNC_WRITE_FROM_FILE_TO_INSTRUMENT</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryBinaryBlockToStream(System.String,System.IO.Stream)">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for fast</para>
            <para>fetching of binary block data.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_BINARY_DATA_BLOCK_TO_STREAM</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryBinaryDataBlockToStreamWithOPCSync(System.String,System.IO.Stream,System.Int32)">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for fast</para>
            <para>fetching of binary block data. If timeout is null, -1 or 0, the current Opc</para>
            <para>Timeout is used.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_BINARY_DATA_BLOCK_TO_STREAM_WITH_OPC</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.WriteBinaryBlockFromStream(System.String,System.IO.Stream)">
            <summary>
            <para>Writes IEEE binary data block from stream to instrument. You need to specify the</para>
            <para>SCPI command to prepend the binary data block.</para>
            <para>Identifier = HMP4000_FUNC_WRITE_BINARY_BLOCK_FROM_STREAM</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryBool(System.String)">
            <summary>
            <para>This method queries the bool value.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_BOOL</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryInt32(System.String)">
            <summary>
            <para>This method queries the int32 value.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_INT32</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryDouble(System.String)">
            <summary>
            <para>This method queries the double value.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_DOUBLE</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryString(System.String)">
            <summary>
            <para>This method queries the string value.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_STRING</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.WriteCommandWithOPCSync(System.String,System.Int32)">
            <summary>
            <para>Sends a command to the instrument synchronised with OPC-polling. Use this</para>
            <para>function to wait for an instrument operation that can take a long time to</para>
            <para>complete, e.g. self-alignment. If timeout is null, -1 or 0, the current Opc</para>
            <para>Timeout is used.</para>
            <para>Identifier = HMP4000_FUNC_WRITE_COMMAND_WITH_OPC_SYNC</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.QueryWithOPCSync(System.String,System.Int32)">
            <summary>
            <para>Sends a query to the instrument synchronised with OPC-polling. Use this function</para>
            <para>to wait for a response that can take a long time to complete e.g.</para>
            <para>self-alignment, calibration or self-test. If timeout is null, -1 or 0, the</para>
            <para>current Opc Timeout is used.</para>
            <para>Identifier = HMP4000_FUNC_QUERY_WITH_OPC_SYNC</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.SelfTest">
            <summary>
            <para>Runs the instrument's self test routine.</para>
            <para>Identifier = HMP4000_FUNC_SELF_TEST</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.RevisionQuery(System.String@,System.String@)">
            <summary>
            <para>Returns the revision numbers of the instrument driver and instrument firmware,</para>
            <para>and tells the user with which instrument firmware this revision of the driver is</para>
            <para>compatible.</para>
            <para>Identifier = HMP4000_FUNC_REVISION_QUERY</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.Delay(System.Double)">
            <summary>
            <para>Suspends the program for the selected number of second.</para>
            <para>Identifier = HMP4000_FUNC_DELAY</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.ErrorQueryAll">
            <summary>
            <para>Returns all error.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>SYSTem:ERRor?</para>
            <para>Identifier = HMP4000_FUNC_ERROR_QUERY_ALL</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.GetInstrumentOptions">
            <summary>
            <para>Returns all the instrument options.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>*OPT?</para>
            <para>Identifier = HMP4000_FUNC_GET_INSTRUMENT_OPTIONS</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.ReadBytes">
            <summary>
            <para>Reads a complete response from the instrument.</para>
            <para>Identifier = HMP4000_FUNC_READ_BYTES</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.ReadString">
            <summary>
            <para>Reads a complete response from the instrument and returns it as a string.</para>
            <para>Identifier = HMP4000_FUNC_READ_STRING</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.WriteBytes(System.Byte[])">
            <summary>
            <para>Write an array of bytes to the device.</para>
            <para>Identifier = HMP4000_FUNC_WRITE_BYTES</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.WriteString(System.String)">
            <summary>
            <para>Write a string to the device.</para>
            <para>Identifier = HMP4000_FUNC_WRITE_STRING</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.Reset">
            <summary>
            <para>This function resets the instrument to a known state and sends initialization</para>
            <para>commands to the instrument. The initialization commands set instrument settings</para>
            <para>such as Headers Off, Short Command form, and Data Transfer Binary to the state</para>
            <para>necessary for the operation of the instrument driver.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>*RST</para>
            <para>Identifier = HMP4000_FUNC_RESET</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.Hmp4000System.ClearStatus">
            <summary>
            <para>This function clears status.</para>
            <para></para>
            <para>Remote-control command(s):</para>
            <para>*CLS</para>
            <para>Identifier = HMP4000_FUNC_CLEAR_STATUS</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000SystemChannel.QuestionableInstrumentSpecificEnableRegister">
            <summary>
            <para>This attribute configures the selected register enable values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:INSTrument:ISUMmary&lt;channel&gt;:ENABle</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.Hmp4000.Hmp4000SystemChannel.QuestionableInstrumentSpecificConditionRegister">
            <summary>
            <para>This attribute queries the selected register condition values.</para>
            <para>Remote-control command(s):</para>
            <para>STATus:QUEStionable:INSTrument:ISUMmary&lt;channel&gt;:CONDition?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.CoreEx.hmp4000_GetVisaTimeout_Callback(IVINET.Internal.RCItemCollection,IVINET.Internal.Attr,System.Object@)">
            <summary>
            Get Visa Timeout callback
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.CoreEx.hmp4000_Delayed_Int32_WriteCallback(IVINET.Internal.RCItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            This method overrides standard callback. Writes integer value and for Serial interface waits 4000ms
            </summary>
        </member>
        <member name="M:RohdeSchwarz.Hmp4000.CoreEx.hmp4000_SetVisaTimeout_Callback(IVINET.Internal.RCItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Set Visa Timeout Callback
            </summary>
        </member>
    </members>
</doc>
